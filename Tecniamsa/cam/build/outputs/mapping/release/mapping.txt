com.google.zxing.BarcodeFormat -> com.google.zxing.a:
    com.google.zxing.BarcodeFormat AZTEC -> a
    com.google.zxing.BarcodeFormat CODABAR -> b
    com.google.zxing.BarcodeFormat CODE_39 -> c
    com.google.zxing.BarcodeFormat CODE_93 -> d
    com.google.zxing.BarcodeFormat CODE_128 -> e
    com.google.zxing.BarcodeFormat DATA_MATRIX -> f
    com.google.zxing.BarcodeFormat EAN_8 -> g
    com.google.zxing.BarcodeFormat EAN_13 -> h
    com.google.zxing.BarcodeFormat ITF -> i
    com.google.zxing.BarcodeFormat MAXICODE -> j
    com.google.zxing.BarcodeFormat PDF_417 -> k
    com.google.zxing.BarcodeFormat QR_CODE -> l
    com.google.zxing.BarcodeFormat RSS_14 -> m
    com.google.zxing.BarcodeFormat RSS_EXPANDED -> n
    com.google.zxing.BarcodeFormat UPC_A -> o
    com.google.zxing.BarcodeFormat UPC_E -> p
    com.google.zxing.BarcodeFormat UPC_EAN_EXTENSION -> q
    com.google.zxing.BarcodeFormat[] $VALUES -> r
    com.google.zxing.BarcodeFormat[] values() -> values
    com.google.zxing.BarcodeFormat valueOf(java.lang.String) -> valueOf
com.google.zxing.Binarizer -> com.google.zxing.b:
    com.google.zxing.LuminanceSource source -> a
    com.google.zxing.LuminanceSource getLuminanceSource() -> a
    com.google.zxing.common.BitArray getBlackRow(int,com.google.zxing.common.BitArray) -> a
    com.google.zxing.common.BitMatrix getBlackMatrix() -> b
    int getWidth() -> c
    int getHeight() -> d
com.google.zxing.BinaryBitmap -> com.google.zxing.c:
    com.google.zxing.Binarizer binarizer -> a
    com.google.zxing.common.BitMatrix matrix -> b
    int getWidth() -> a
    int getHeight() -> b
    com.google.zxing.common.BitArray getBlackRow(int,com.google.zxing.common.BitArray) -> a
    com.google.zxing.common.BitMatrix getBlackMatrix() -> c
com.google.zxing.ChecksumException -> com.google.zxing.d:
    com.google.zxing.ChecksumException instance -> a
    com.google.zxing.ChecksumException getChecksumInstance() -> a
com.google.zxing.DecodeHintType -> com.google.zxing.e:
    com.google.zxing.DecodeHintType OTHER -> a
    com.google.zxing.DecodeHintType PURE_BARCODE -> b
    com.google.zxing.DecodeHintType POSSIBLE_FORMATS -> c
    com.google.zxing.DecodeHintType TRY_HARDER -> d
    com.google.zxing.DecodeHintType CHARACTER_SET -> e
    com.google.zxing.DecodeHintType ALLOWED_LENGTHS -> f
    com.google.zxing.DecodeHintType ASSUME_CODE_39_CHECK_DIGIT -> g
    com.google.zxing.DecodeHintType NEED_RESULT_POINT_CALLBACK -> h
    com.google.zxing.DecodeHintType[] $VALUES -> i
    com.google.zxing.DecodeHintType[] values() -> values
    com.google.zxing.DecodeHintType valueOf(java.lang.String) -> valueOf
com.google.zxing.EncodeHintType -> com.google.zxing.f:
    com.google.zxing.EncodeHintType ERROR_CORRECTION -> a
    com.google.zxing.EncodeHintType CHARACTER_SET -> b
    com.google.zxing.EncodeHintType[] $VALUES -> c
    com.google.zxing.EncodeHintType[] values() -> values
    com.google.zxing.EncodeHintType valueOf(java.lang.String) -> valueOf
com.google.zxing.FormatException -> com.google.zxing.g:
    com.google.zxing.FormatException instance -> a
    com.google.zxing.FormatException getFormatInstance() -> a
com.google.zxing.LuminanceSource -> com.google.zxing.h:
    int width -> a
    int height -> b
    byte[] getRow(int,byte[]) -> a
    byte[] getMatrix() -> a
    int getWidth() -> b
    int getHeight() -> c
    java.lang.String toString() -> toString
com.google.zxing.MultiFormatReader -> com.google.zxing.i:
    java.util.Map hints -> a
    com.google.zxing.Reader[] readers -> b
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    com.google.zxing.Result decodeWithState(com.google.zxing.BinaryBitmap) -> a
    void setHints(java.util.Map) -> a
    void reset() -> a
    com.google.zxing.Result decodeInternal(com.google.zxing.BinaryBitmap) -> b
com.google.zxing.MultiFormatWriter -> com.google.zxing.j:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
com.google.zxing.MultiFormatWriter$1 -> com.google.zxing.k:
    int[] $SwitchMap$com$google$zxing$BarcodeFormat -> a
com.google.zxing.NotFoundException -> com.google.zxing.l:
    com.google.zxing.NotFoundException instance -> a
    com.google.zxing.NotFoundException getNotFoundInstance() -> a
com.google.zxing.Reader -> com.google.zxing.m:
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    void reset() -> a
com.google.zxing.ReaderException -> com.google.zxing.n:
    java.lang.Throwable fillInStackTrace() -> fillInStackTrace
com.google.zxing.Result -> com.google.zxing.o:
    java.lang.String text -> a
    byte[] rawBytes -> b
    com.google.zxing.ResultPoint[] resultPoints -> c
    com.google.zxing.BarcodeFormat format -> d
    java.util.Map resultMetadata -> e
    long timestamp -> f
    java.lang.String getText() -> a
    byte[] getRawBytes() -> b
    com.google.zxing.ResultPoint[] getResultPoints() -> c
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> d
    java.util.Map getResultMetadata() -> e
    void putMetadata(com.google.zxing.ResultMetadataType,java.lang.Object) -> a
    void putAllMetadata(java.util.Map) -> a
    void addResultPoints(com.google.zxing.ResultPoint[]) -> a
    long getTimestamp() -> f
    java.lang.String toString() -> toString
com.google.zxing.ResultMetadataType -> com.google.zxing.p:
    com.google.zxing.ResultMetadataType OTHER -> a
    com.google.zxing.ResultMetadataType ORIENTATION -> b
    com.google.zxing.ResultMetadataType BYTE_SEGMENTS -> c
    com.google.zxing.ResultMetadataType ERROR_CORRECTION_LEVEL -> d
    com.google.zxing.ResultMetadataType ISSUE_NUMBER -> e
    com.google.zxing.ResultMetadataType SUGGESTED_PRICE -> f
    com.google.zxing.ResultMetadataType POSSIBLE_COUNTRY -> g
    com.google.zxing.ResultMetadataType[] $VALUES -> h
    com.google.zxing.ResultMetadataType[] values() -> values
    com.google.zxing.ResultMetadataType valueOf(java.lang.String) -> valueOf
com.google.zxing.ResultPoint -> com.google.zxing.q:
    float x -> a
    float y -> b
    float getX() -> a
    float getY() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void orderBestPatterns(com.google.zxing.ResultPoint[]) -> a
    float distance(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> a
com.google.zxing.ResultPointCallback -> com.google.zxing.r:
    void foundPossibleResultPoint(com.google.zxing.ResultPoint) -> a
com.google.zxing.Writer -> com.google.zxing.s:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
com.google.zxing.WriterException -> com.google.zxing.t:
com.google.zxing.aztec.AztecDetectorResult -> com.google.zxing.aztec.a:
    boolean compact -> a
    int nbDatablocks -> b
    int nbLayers -> c
    int getNbLayers() -> a
    int getNbDatablocks() -> b
    boolean isCompact() -> c
com.google.zxing.aztec.AztecReader -> com.google.zxing.aztec.b:
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    void reset() -> a
com.google.zxing.aztec.decoder.Decoder -> com.google.zxing.aztec.decoder.a:
    int[] NB_BITS_COMPACT -> a
    int[] NB_BITS -> b
    int[] NB_DATABLOCK_COMPACT -> c
    int[] NB_DATABLOCK -> d
    java.lang.String[] UPPER_TABLE -> e
    java.lang.String[] LOWER_TABLE -> f
    java.lang.String[] MIXED_TABLE -> g
    java.lang.String[] PUNCT_TABLE -> h
    java.lang.String[] DIGIT_TABLE -> i
    int numCodewords -> j
    int codewordSize -> k
    com.google.zxing.aztec.AztecDetectorResult ddata -> l
    int invertedBitCount -> m
    com.google.zxing.common.DecoderResult decode(com.google.zxing.aztec.AztecDetectorResult) -> a
    boolean[] correctBits(boolean[]) -> a
    int readCode(boolean[],int,int) -> a
com.google.zxing.aztec.decoder.Decoder$1 -> com.google.zxing.aztec.decoder.b:
    int[] $SwitchMap$com$google$zxing$aztec$decoder$Decoder$Table -> a
com.google.zxing.aztec.decoder.Decoder$Table -> com.google.zxing.aztec.decoder.c:
    int UPPER$2679db95 -> a
    int LOWER$2679db95 -> b
    int MIXED$2679db95 -> c
    int DIGIT$2679db95 -> d
    int PUNCT$2679db95 -> e
    int BINARY$2679db95 -> f
    int[] $VALUES$171a8b50 -> g
    int[] values$17d9718f() -> a
com.google.zxing.aztec.detector.Detector -> com.google.zxing.aztec.detector.a:
    com.google.zxing.common.BitMatrix image -> a
    boolean compact -> b
    int nbLayers -> c
    int nbDataBlocks -> d
    int nbCenterLayers -> e
    int shift -> f
    com.google.zxing.aztec.AztecDetectorResult detect() -> a
    com.google.zxing.aztec.detector.Detector$Point getMatrixCenter() -> b
    boolean[] sampleLine(com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point,int) -> a
    int getColor(com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point) -> a
    com.google.zxing.aztec.detector.Detector$Point getFirstDifferent(com.google.zxing.aztec.detector.Detector$Point,boolean,int,int) -> a
    boolean isValid(int,int) -> a
    float distance(com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point) -> b
com.google.zxing.aztec.detector.Detector$Point -> com.google.zxing.aztec.detector.b:
    int x -> a
    int y -> b
    com.google.zxing.ResultPoint toResultPoint() -> a
com.google.zxing.client.android.BeepManager -> com.google.zxing.client.android.a:
    java.lang.String TAG -> a
    android.app.Activity activity -> b
    android.media.MediaPlayer mediaPlayer -> c
    boolean playBeep -> d
    boolean vibrate -> e
    void updatePrefs() -> a
    void playBeepSoundAndVibrate() -> b
    android.media.MediaPlayer buildMediaPlayer(android.content.Context) -> a
com.google.zxing.client.android.BeepManager$1 -> com.google.zxing.client.android.b:
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.google.zxing.client.android.CaptureActivity -> com.google.zxing.client.android.CaptureActivity:
    java.lang.String TAG -> a
    java.lang.String[] ZXING_URLS -> b
    java.util.Set DISPLAYABLE_METADATA_TYPES -> c
    com.google.zxing.client.android.camera.CameraManager cameraManager -> d
    com.google.zxing.client.android.CaptureActivityHandler handler -> e
    com.google.zxing.Result savedResultToShow -> f
    com.google.zxing.client.android.ViewfinderView viewfinderView -> g
    android.widget.TextView statusView -> h
    android.view.View resultView -> i
    com.google.zxing.Result lastResult -> j
    boolean hasSurface -> k
    boolean copyToClipboard -> l
    int source$37429bb9 -> m
    java.lang.String sourceUrl -> n
    java.lang.String returnUrlTemplate -> o
    java.util.Collection decodeFormats -> p
    java.lang.String characterSet -> q
    java.lang.String versionName -> r
    com.google.zxing.client.android.history.HistoryManager historyManager -> s
    com.google.zxing.client.android.InactivityTimer inactivityTimer -> t
    com.google.zxing.client.android.BeepManager beepManager -> u
    android.content.DialogInterface$OnClickListener aboutListener -> v
    com.google.zxing.client.android.ViewfinderView getViewfinderView() -> a
    android.os.Handler getHandler() -> b
    com.google.zxing.client.android.camera.CameraManager getCameraManager() -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void decodeOrStoreSavedBitmap$6b21e938(com.google.zxing.Result) -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void handleDecode(com.google.zxing.Result,android.graphics.Bitmap) -> a
    void drawLine(android.graphics.Canvas,android.graphics.Paint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> a
    void handleDecodeInternally(com.google.zxing.Result,com.google.zxing.client.android.result.ResultHandler,android.graphics.Bitmap) -> a
    void handleDecodeExternally(com.google.zxing.Result,com.google.zxing.client.android.result.ResultHandler,android.graphics.Bitmap) -> b
    void sendReplyMessage(int,java.lang.Object) -> a
    boolean showHelpOnFirstLaunch() -> e
    void initCamera(android.view.SurfaceHolder) -> a
    void displayFrameworkBugMessageAndExit() -> f
    void restartPreviewAfterDelay(long) -> a
    void resetStatusView() -> g
    void drawViewfinder() -> d
com.google.zxing.client.android.CaptureActivity$1 -> com.google.zxing.client.android.c:
    com.google.zxing.client.android.CaptureActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.zxing.client.android.CaptureActivity$2 -> com.google.zxing.client.android.d:
    int[] $SwitchMap$com$google$zxing$client$android$IntentSource -> a
com.google.zxing.client.android.CaptureActivityHandler -> com.google.zxing.client.android.e:
    java.lang.String TAG -> a
    com.google.zxing.client.android.CaptureActivity activity -> b
    com.google.zxing.client.android.DecodeThread decodeThread -> c
    int state$495b0d5c -> d
    com.google.zxing.client.android.camera.CameraManager cameraManager -> e
    void handleMessage(android.os.Message) -> handleMessage
    void quitSynchronously() -> a
    void restartPreviewAndDecode() -> b
com.google.zxing.client.android.CaptureActivityHandler$State -> com.google.zxing.client.android.f:
    int PREVIEW$495b0d5c -> a
    int SUCCESS$495b0d5c -> b
    int DONE$495b0d5c -> c
    int[] $VALUES$22a0ef89 -> d
com.google.zxing.client.android.Contents -> com.google.zxing.client.android.g:
    java.lang.String[] PHONE_KEYS -> a
    java.lang.String[] PHONE_TYPE_KEYS -> b
    java.lang.String[] EMAIL_KEYS -> c
    java.lang.String[] EMAIL_TYPE_KEYS -> d
com.google.zxing.client.android.DecodeFormatManager -> com.google.zxing.client.android.h:
    java.util.regex.Pattern COMMA_PATTERN -> e
    java.util.Collection PRODUCT_FORMATS -> a
    java.util.Collection ONE_D_FORMATS -> b
    java.util.Collection QR_CODE_FORMATS -> c
    java.util.Collection DATA_MATRIX_FORMATS -> d
    java.util.Collection parseDecodeFormats(android.content.Intent) -> a
    java.util.Collection parseDecodeFormats(android.net.Uri) -> a
    java.util.Collection parseDecodeFormats(java.lang.Iterable,java.lang.String) -> a
com.google.zxing.client.android.DecodeHandler -> com.google.zxing.client.android.i:
    java.lang.String TAG -> a
    com.google.zxing.client.android.CaptureActivity activity -> b
    com.google.zxing.MultiFormatReader multiFormatReader -> c
    boolean running -> d
    void handleMessage(android.os.Message) -> handleMessage
com.google.zxing.client.android.DecodeThread -> com.google.zxing.client.android.j:
    com.google.zxing.client.android.CaptureActivity activity -> a
    java.util.Map hints -> b
    android.os.Handler handler -> c
    java.util.concurrent.CountDownLatch handlerInitLatch -> d
    android.os.Handler getHandler() -> a
    void run() -> run
com.google.zxing.client.android.FinishListener -> com.google.zxing.client.android.k:
    android.app.Activity activityToFinish -> a
    void onCancel(android.content.DialogInterface) -> onCancel
    void onClick(android.content.DialogInterface,int) -> onClick
    void run() -> run
com.google.zxing.client.android.HelpActivity -> com.google.zxing.client.android.HelpActivity:
    java.lang.String BASE_URL -> a
    android.webkit.WebView webView -> b
    android.widget.Button backButton -> c
    android.view.View$OnClickListener backListener -> d
    android.view.View$OnClickListener doneListener -> e
    void onCreate(android.os.Bundle) -> onCreate
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    android.webkit.WebView access$000(com.google.zxing.client.android.HelpActivity) -> a
    android.widget.Button access$200(com.google.zxing.client.android.HelpActivity) -> b
com.google.zxing.client.android.HelpActivity$1 -> com.google.zxing.client.android.l:
    com.google.zxing.client.android.HelpActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.google.zxing.client.android.HelpActivity$2 -> com.google.zxing.client.android.m:
    com.google.zxing.client.android.HelpActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.google.zxing.client.android.HelpActivity$HelpClient -> com.google.zxing.client.android.n:
    com.google.zxing.client.android.HelpActivity this$0 -> a
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
com.google.zxing.client.android.HttpHelper -> com.google.zxing.client.android.o:
    java.util.Collection REDIRECTOR_DOMAINS -> a
    java.lang.String downloadViaHttp$40579fa8(java.lang.String,int) -> a
    java.lang.String downloadViaHttp(java.lang.String,java.lang.String) -> a
    java.lang.String consume(java.net.URLConnection) -> a
    java.net.URI unredirect(java.net.URI) -> a
com.google.zxing.client.android.HttpHelper$1 -> com.google.zxing.client.android.p:
    int[] $SwitchMap$com$google$zxing$client$android$HttpHelper$ContentType -> a
com.google.zxing.client.android.HttpHelper$ContentType -> com.google.zxing.client.android.q:
    int HTML$79fb7a39 -> a
    int JSON$79fb7a39 -> b
    int TEXT$79fb7a39 -> c
    int[] $VALUES$2a65526c -> d
    int[] values$3fb5fb3() -> a
com.google.zxing.client.android.InactivityTimer -> com.google.zxing.client.android.r:
    java.util.concurrent.ScheduledExecutorService inactivityTimer -> a
    android.app.Activity activity -> b
    java.util.concurrent.ScheduledFuture inactivityFuture -> c
    android.content.BroadcastReceiver powerStatusReceiver -> d
    void onActivity() -> a
    void onPause() -> b
    void onResume() -> c
    void cancel() -> e
    void shutdown() -> d
    void access$200(com.google.zxing.client.android.InactivityTimer) -> a
com.google.zxing.client.android.InactivityTimer$DaemonThreadFactory -> com.google.zxing.client.android.s:
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.google.zxing.client.android.InactivityTimer$PowerStatusReceiver -> com.google.zxing.client.android.t:
    com.google.zxing.client.android.InactivityTimer this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.google.zxing.client.android.IntentSource -> com.google.zxing.client.android.u:
    int NATIVE_APP_INTENT$37429bb9 -> a
    int PRODUCT_SEARCH_LINK$37429bb9 -> b
    int ZXING_LINK$37429bb9 -> c
    int NONE$37429bb9 -> d
    int[] $VALUES$74d7029e -> e
    int[] values$45e305bf() -> a
com.google.zxing.client.android.LocaleManager -> com.google.zxing.client.android.v:
    java.lang.String COUNTRY -> a
    java.lang.String LANGUAGE -> b
    java.util.Map GOOGLE_COUNTRY_TLD -> c
    java.util.Map GOOGLE_PRODUCT_SEARCH_COUNTRY_TLD -> d
    java.util.Map GOOGLE_BOOK_SEARCH_COUNTRY_TLD -> e
    java.util.Collection TRANSLATED_HELP_ASSET_LANGUAGES -> f
    java.lang.String getCountryTLD(android.content.Context) -> a
    java.lang.String getProductSearchCountryTLD(android.content.Context) -> b
    java.lang.String getBookSearchCountryTLD(android.content.Context) -> c
    java.lang.String doGetTLD(java.util.Map,android.content.Context) -> a
    boolean isBookSearchUrl(java.lang.String) -> a
    java.lang.String getTranslatedAssetLanguage() -> a
com.google.zxing.client.android.PlanarYUVLuminanceSource -> com.google.zxing.client.android.w:
    byte[] yuvData -> a
    int dataWidth -> b
    int dataHeight -> c
    int left -> d
    int top -> e
    byte[] getRow(int,byte[]) -> a
    byte[] getMatrix() -> a
    android.graphics.Bitmap renderCroppedGreyscaleBitmap() -> d
    void reverseHorizontal(int,int) -> a
com.google.zxing.client.android.PreferencesActivity -> com.google.zxing.client.android.PreferencesActivity:
    android.preference.CheckBoxPreference decode1D -> a
    android.preference.CheckBoxPreference decodeQR -> b
    android.preference.CheckBoxPreference decodeDataMatrix -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String) -> onSharedPreferenceChanged
    void disableLastCheckedPref() -> a
com.google.zxing.client.android.ViewfinderResultPointCallback -> com.google.zxing.client.android.x:
    com.google.zxing.client.android.ViewfinderView viewfinderView -> a
    void foundPossibleResultPoint(com.google.zxing.ResultPoint) -> a
com.google.zxing.client.android.ViewfinderView -> com.google.zxing.client.android.ViewfinderView:
    int[] SCANNER_ALPHA -> a
    com.google.zxing.client.android.camera.CameraManager cameraManager -> b
    android.graphics.Paint paint -> c
    android.graphics.Bitmap resultBitmap -> d
    int maskColor -> e
    int resultColor -> f
    int frameColor -> g
    int laserColor -> h
    int resultPointColor -> i
    int scannerAlpha -> j
    java.util.List possibleResultPoints -> k
    java.util.List lastPossibleResultPoints -> l
    void setCameraManager(com.google.zxing.client.android.camera.CameraManager) -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    void drawViewfinder() -> a
    void drawResultBitmap(android.graphics.Bitmap) -> a
    void addPossibleResultPoint(com.google.zxing.ResultPoint) -> a
com.google.zxing.client.android.book.BrowseBookListener -> com.google.zxing.client.android.book.a:
    com.google.zxing.client.android.book.SearchBookContentsActivity activity -> a
    java.util.List items -> b
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
com.google.zxing.client.android.book.NetworkWorker -> com.google.zxing.client.android.book.b:
    java.lang.String TAG -> a
    java.lang.String isbn -> b
    java.lang.String query -> c
    android.os.Handler handler -> d
    void run() -> run
com.google.zxing.client.android.book.SearchBookContentsActivity -> com.google.zxing.client.android.book.SearchBookContentsActivity:
    java.lang.String TAG -> a
    java.util.regex.Pattern TAG_PATTERN -> b
    java.util.regex.Pattern LT_ENTITY_PATTERN -> c
    java.util.regex.Pattern GT_ENTITY_PATTERN -> d
    java.util.regex.Pattern QUOTE_ENTITY_PATTERN -> e
    java.util.regex.Pattern QUOT_ENTITY_PATTERN -> f
    java.lang.Thread networkThread -> g
    java.lang.String isbn -> h
    android.widget.EditText queryTextView -> i
    android.widget.Button queryButton -> j
    android.widget.ListView resultListView -> k
    android.widget.TextView headerView -> l
    android.os.Handler handler -> m
    android.view.View$OnClickListener buttonListener -> n
    android.view.View$OnKeyListener keyListener -> o
    java.lang.String getISBN() -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    com.google.zxing.client.android.book.SearchBookContentsResult parseResult(org.json.JSONObject) -> a
    void access$000(com.google.zxing.client.android.book.SearchBookContentsActivity,org.json.JSONObject) -> a
    void access$100(com.google.zxing.client.android.book.SearchBookContentsActivity) -> a
    android.widget.TextView access$200(com.google.zxing.client.android.book.SearchBookContentsActivity) -> b
    void access$300(com.google.zxing.client.android.book.SearchBookContentsActivity) -> c
com.google.zxing.client.android.book.SearchBookContentsActivity$1 -> com.google.zxing.client.android.book.c:
    com.google.zxing.client.android.book.SearchBookContentsActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.google.zxing.client.android.book.SearchBookContentsActivity$2 -> com.google.zxing.client.android.book.d:
    com.google.zxing.client.android.book.SearchBookContentsActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.google.zxing.client.android.book.SearchBookContentsActivity$3 -> com.google.zxing.client.android.book.e:
    com.google.zxing.client.android.book.SearchBookContentsActivity this$0 -> a
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.google.zxing.client.android.book.SearchBookContentsAdapter -> com.google.zxing.client.android.book.f:
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.google.zxing.client.android.book.SearchBookContentsListItem -> com.google.zxing.client.android.book.SearchBookContentsListItem:
    android.widget.TextView pageNumberView -> a
    android.widget.TextView snippetView -> b
    void onFinishInflate() -> onFinishInflate
    void set(com.google.zxing.client.android.book.SearchBookContentsResult) -> a
com.google.zxing.client.android.book.SearchBookContentsResult -> com.google.zxing.client.android.book.g:
    java.lang.String query -> a
    java.lang.String pageId -> b
    java.lang.String pageNumber -> c
    java.lang.String snippet -> d
    boolean validSnippet -> e
    void setQuery(java.lang.String) -> a
    java.lang.String getPageId() -> a
    java.lang.String getPageNumber() -> b
    java.lang.String getSnippet() -> c
    boolean getValidSnippet() -> d
    java.lang.String getQuery() -> e
com.google.zxing.client.android.camera.AutoFocusCallback -> com.google.zxing.client.android.camera.a:
    java.lang.String TAG -> a
    android.os.Handler autoFocusHandler -> b
    int autoFocusMessage -> c
    void setHandler(android.os.Handler,int) -> a
    void onAutoFocus(boolean,android.hardware.Camera) -> onAutoFocus
com.google.zxing.client.android.camera.CameraConfigurationManager -> com.google.zxing.client.android.camera.b:
    android.content.Context context -> a
    android.graphics.Point screenResolution -> b
    android.graphics.Point cameraResolution -> c
    void initFromCameraParameters(android.hardware.Camera) -> a
    void setDesiredCameraParameters(android.hardware.Camera) -> b
    android.graphics.Point getCameraResolution() -> a
    android.graphics.Point getScreenResolution() -> b
    android.graphics.Point findBestPreviewSizeValue$276474aa(android.hardware.Camera$Parameters,android.graphics.Point) -> a
    java.lang.String findSettableValue(java.util.Collection,java.lang.String[]) -> a
com.google.zxing.client.android.camera.CameraManager -> com.google.zxing.client.android.camera.c:
    java.lang.String TAG -> a
    android.content.Context context -> b
    com.google.zxing.client.android.camera.CameraConfigurationManager configManager -> c
    android.hardware.Camera camera -> d
    android.graphics.Rect framingRect -> e
    android.graphics.Rect framingRectInPreview -> f
    boolean initialized -> g
    boolean previewing -> h
    boolean reverseImage -> i
    int requestedFramingRectWidth -> j
    int requestedFramingRectHeight -> k
    com.google.zxing.client.android.camera.PreviewCallback previewCallback -> l
    com.google.zxing.client.android.camera.AutoFocusCallback autoFocusCallback -> m
    void openDriver(android.view.SurfaceHolder) -> a
    void closeDriver() -> a
    void startPreview() -> b
    void stopPreview() -> c
    void requestPreviewFrame(android.os.Handler,int) -> a
    void requestAutoFocus(android.os.Handler,int) -> b
    android.graphics.Rect getFramingRect() -> d
    android.graphics.Rect getFramingRectInPreview() -> e
    void setManualFramingRect(int,int) -> a
    com.google.zxing.client.android.PlanarYUVLuminanceSource buildLuminanceSource(byte[],int,int) -> a
com.google.zxing.client.android.camera.PreviewCallback -> com.google.zxing.client.android.camera.d:
    java.lang.String TAG -> a
    com.google.zxing.client.android.camera.CameraConfigurationManager configManager -> b
    android.os.Handler previewHandler -> c
    int previewMessage -> d
    void setHandler(android.os.Handler,int) -> a
    void onPreviewFrame(byte[],android.hardware.Camera) -> onPreviewFrame
com.google.zxing.client.android.encode.ContactEncoder -> com.google.zxing.client.android.encode.a:
    java.lang.String[] encode(java.lang.Iterable,java.lang.String,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.String,java.lang.String) -> a
    java.lang.String trim(java.lang.String) -> a
    void doAppend(java.lang.StringBuilder,java.lang.StringBuilder,java.lang.String,java.lang.String,com.google.zxing.client.android.encode.Formatter,char) -> a
    void doAppendUpToUnique(java.lang.StringBuilder,java.lang.StringBuilder,java.lang.String,java.lang.Iterable,int,com.google.zxing.client.android.encode.Formatter,com.google.zxing.client.android.encode.Formatter,char) -> a
com.google.zxing.client.android.encode.EncodeActivity -> com.google.zxing.client.android.encode.EncodeActivity:
    java.lang.String TAG -> a
    java.util.regex.Pattern NOT_ALPHANUMERIC -> b
    com.google.zxing.client.android.encode.QRCodeEncoder qrCodeEncoder -> c
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onResume() -> onResume
    void showErrorMessage(int) -> a
com.google.zxing.client.android.encode.Formatter -> com.google.zxing.client.android.encode.b:
    java.lang.String format(java.lang.String) -> a
com.google.zxing.client.android.encode.MECARDContactEncoder -> com.google.zxing.client.android.encode.c:
    java.util.regex.Pattern RESERVED_MECARD_CHARS -> a
    java.util.regex.Pattern NEWLINE -> b
    java.util.regex.Pattern COMMA -> c
    com.google.zxing.client.android.encode.Formatter MECARD_FIELD_FORMATTER -> d
    java.lang.String[] encode(java.lang.Iterable,java.lang.String,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.String,java.lang.String) -> a
    void append(java.lang.StringBuilder,java.lang.StringBuilder,java.lang.String,java.lang.String) -> a
    void appendUpToUnique(java.lang.StringBuilder,java.lang.StringBuilder,java.lang.String,java.lang.Iterable,int,com.google.zxing.client.android.encode.Formatter) -> a
    java.util.regex.Pattern access$000() -> a
    java.util.regex.Pattern access$100() -> b
    java.util.regex.Pattern access$200() -> c
com.google.zxing.client.android.encode.MECARDContactEncoder$1 -> com.google.zxing.client.android.encode.d:
    java.lang.String format(java.lang.String) -> a
com.google.zxing.client.android.encode.MECARDContactEncoder$2 -> com.google.zxing.client.android.encode.e:
    com.google.zxing.client.android.encode.MECARDContactEncoder this$0 -> a
    java.lang.String format(java.lang.String) -> a
com.google.zxing.client.android.encode.MECARDContactEncoder$3 -> com.google.zxing.client.android.encode.f:
    com.google.zxing.client.android.encode.MECARDContactEncoder this$0 -> a
    java.lang.String format(java.lang.String) -> a
com.google.zxing.client.android.encode.QRCodeEncoder -> com.google.zxing.client.android.encode.g:
    java.lang.String TAG -> a
    android.app.Activity activity -> b
    java.lang.String contents -> c
    java.lang.String displayContents -> d
    java.lang.String title -> e
    com.google.zxing.BarcodeFormat format -> f
    int dimension -> g
    boolean useVCard -> h
    java.lang.String getContents() -> a
    java.lang.String getDisplayContents() -> b
    java.lang.String getTitle() -> c
    boolean isUseVCard() -> d
    boolean encodeContentsFromZXingIntent(android.content.Intent) -> a
    java.lang.Iterable toIterable(java.lang.String[]) -> a
    android.graphics.Bitmap encodeAsBitmap() -> e
com.google.zxing.client.android.encode.VCardContactEncoder -> com.google.zxing.client.android.encode.h:
    java.util.regex.Pattern RESERVED_VCARD_CHARS -> a
    java.util.regex.Pattern NEWLINE -> b
    com.google.zxing.client.android.encode.Formatter VCARD_FIELD_FORMATTER -> c
    java.lang.String[] encode(java.lang.Iterable,java.lang.String,java.lang.Iterable,java.lang.Iterable,java.lang.Iterable,java.lang.String,java.lang.String) -> a
    void append(java.lang.StringBuilder,java.lang.StringBuilder,java.lang.String,java.lang.String) -> a
    void appendUpToUnique(java.lang.StringBuilder,java.lang.StringBuilder,java.lang.String,java.lang.Iterable,int,com.google.zxing.client.android.encode.Formatter) -> a
    java.util.regex.Pattern access$000() -> a
    java.util.regex.Pattern access$100() -> b
com.google.zxing.client.android.encode.VCardContactEncoder$1 -> com.google.zxing.client.android.encode.i:
    java.lang.String format(java.lang.String) -> a
com.google.zxing.client.android.encode.VCardContactEncoder$2 -> com.google.zxing.client.android.encode.j:
    com.google.zxing.client.android.encode.VCardContactEncoder this$0 -> a
    java.lang.String format(java.lang.String) -> a
com.google.zxing.client.android.history.DBHelper -> com.google.zxing.client.android.history.a:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
com.google.zxing.client.android.history.HistoryActivity -> com.google.zxing.client.android.history.HistoryActivity:
    com.google.zxing.client.android.history.HistoryManager historyManager -> a
    com.google.zxing.client.android.history.HistoryItemAdapter adapter -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    com.google.zxing.client.android.history.HistoryManager access$000(com.google.zxing.client.android.history.HistoryActivity) -> a
com.google.zxing.client.android.history.HistoryActivity$1 -> com.google.zxing.client.android.history.b:
    com.google.zxing.client.android.history.HistoryActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.zxing.client.android.history.HistoryItem -> com.google.zxing.client.android.history.c:
    com.google.zxing.Result result -> a
    java.lang.String display -> b
    java.lang.String details -> c
    com.google.zxing.Result getResult() -> a
    java.lang.String getDisplayAndDetails() -> b
com.google.zxing.client.android.history.HistoryItemAdapter -> com.google.zxing.client.android.history.d:
    android.app.Activity activity -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.google.zxing.client.android.history.HistoryManager -> com.google.zxing.client.android.history.e:
    java.lang.String TAG -> a
    java.lang.String[] COLUMNS -> b
    java.lang.String[] COUNT_COLUMN -> c
    java.lang.String[] ID_COL_PROJECTION -> d
    java.lang.String[] ID_DETAIL_COL_PROJECTION -> e
    java.text.DateFormat EXPORT_DATE_TIME_FORMAT -> f
    android.app.Activity activity -> g
    boolean hasHistoryItems() -> a
    java.util.List buildHistoryItems() -> b
    com.google.zxing.client.android.history.HistoryItem buildHistoryItem(int) -> a
    void deleteHistoryItem(int) -> b
    void addHistoryItem(com.google.zxing.Result,com.google.zxing.client.android.result.ResultHandler) -> a
    void addHistoryItemDetails(java.lang.String,java.lang.String) -> a
    void trimHistory() -> c
    java.lang.CharSequence buildHistory() -> d
    void clearHistory() -> e
    android.net.Uri saveHistory(java.lang.String) -> a
    java.lang.String massageHistoryField(java.lang.String) -> b
    void close(android.database.Cursor,android.database.sqlite.SQLiteDatabase) -> a
com.google.zxing.client.android.result.AddressBookResultHandler -> com.google.zxing.client.android.result.a:
    java.text.DateFormat[] DATE_FORMATS -> a
    int[] BUTTON_TEXTS -> b
    boolean[] fields -> c
    int buttonCount -> d
    int mapIndexToAction(int) -> c
    int getButtonCount() -> a
    int getButtonText(int) -> a
    void handleButtonPress(int) -> b
    java.util.Date parseDate(java.lang.String) -> k
    java.lang.CharSequence getDisplayContents() -> b
    int getDisplayTitle() -> c
com.google.zxing.client.android.result.CalendarResultHandler -> com.google.zxing.client.android.result.b:
    java.text.DateFormat DATE_FORMAT -> a
    java.text.DateFormat DATE_TIME_FORMAT -> b
    int[] buttons -> c
    int getButtonCount() -> a
    int getButtonText(int) -> a
    void handleButtonPress(int) -> b
    java.lang.CharSequence getDisplayContents() -> b
    void appendTime(java.lang.String,java.lang.StringBuilder,boolean,boolean) -> a
    int getDisplayTitle() -> c
com.google.zxing.client.android.result.EmailAddressResultHandler -> com.google.zxing.client.android.result.c:
    int[] buttons -> a
    int getButtonCount() -> a
    int getButtonText(int) -> a
    void handleButtonPress(int) -> b
    int getDisplayTitle() -> c
com.google.zxing.client.android.result.GeoResultHandler -> com.google.zxing.client.android.result.d:
    int[] buttons -> a
    int getButtonCount() -> a
    int getButtonText(int) -> a
    void handleButtonPress(int) -> b
    int getDisplayTitle() -> c
com.google.zxing.client.android.result.ISBNResultHandler -> com.google.zxing.client.android.result.e:
    int[] buttons -> a
    int getButtonCount() -> a
    int getButtonText(int) -> a
    void handleButtonPress(int) -> b
    int getDisplayTitle() -> c
com.google.zxing.client.android.result.ISBNResultHandler$1 -> com.google.zxing.client.android.result.f:
    com.google.zxing.client.android.result.ISBNResultHandler this$0 -> a
    void onClick(android.view.View) -> onClick
com.google.zxing.client.android.result.ProductResultHandler -> com.google.zxing.client.android.result.g:
    int[] buttons -> a
    int getButtonCount() -> a
    int getButtonText(int) -> a
    void handleButtonPress(int) -> b
    int getDisplayTitle() -> c
com.google.zxing.client.android.result.ProductResultHandler$1 -> com.google.zxing.client.android.result.h:
    com.google.zxing.client.android.result.ProductResultHandler this$0 -> a
    void onClick(android.view.View) -> onClick
com.google.zxing.client.android.result.ResultButtonListener -> com.google.zxing.client.android.result.i:
    com.google.zxing.client.android.result.ResultHandler resultHandler -> a
    int index -> b
    void onClick(android.view.View) -> onClick
com.google.zxing.client.android.result.ResultHandler -> com.google.zxing.client.android.result.j:
    java.lang.String TAG -> a
    java.text.DateFormat DATE_FORMAT -> b
    java.text.DateFormat DATE_TIME_FORMAT -> c
    java.lang.String[] EMAIL_TYPE_STRINGS -> d
    java.lang.String[] PHONE_TYPE_STRINGS -> e
    java.lang.String[] ADDRESS_TYPE_STRINGS -> f
    int[] EMAIL_TYPE_VALUES -> g
    int[] PHONE_TYPE_VALUES -> h
    int[] ADDRESS_TYPE_VALUES -> i
    com.google.zxing.client.result.ParsedResult result -> j
    android.app.Activity activity -> k
    com.google.zxing.Result rawResult -> l
    java.lang.String customProductSearch -> m
    android.content.DialogInterface$OnClickListener shopperMarketListener -> n
    com.google.zxing.client.result.ParsedResult getResult() -> d
    boolean hasCustomProductSearch() -> e
    android.app.Activity getActivity() -> f
    int getButtonCount() -> a
    int getButtonText(int) -> a
    void handleButtonPress(int) -> b
    boolean areContentsSecure() -> g
    void showGoogleShopperButton(android.view.View$OnClickListener) -> a
    java.lang.CharSequence getDisplayContents() -> b
    int getDisplayTitle() -> c
    com.google.zxing.client.result.ParsedResultType getType() -> h
    void addCalendarEvent(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    long calculateMilliseconds(java.lang.String) -> k
    void addPhoneOnlyContact$12263155(java.lang.String[]) -> a
    void addContact(java.lang.String[],java.lang.String,java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    int doToContractType(java.lang.String,java.lang.String[],int[]) -> a
    void shareByEmail(java.lang.String) -> a
    void sendEmailFromUri(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void shareBySMS(java.lang.String) -> b
    void sendSMS(java.lang.String,java.lang.String) -> a
    void sendSMSFromUri(java.lang.String,java.lang.String) -> b
    void sendMMS(java.lang.String,java.lang.String,java.lang.String) -> a
    void dialPhoneFromUri(java.lang.String) -> c
    void getDirections(double,double) -> a
    void openProductSearch(java.lang.String) -> d
    void openBookSearch(java.lang.String) -> e
    void searchBookContents(java.lang.String) -> f
    void openURL(java.lang.String) -> g
    void webSearch(java.lang.String) -> h
    void openGoogleShopper(java.lang.String) -> i
    void launchIntent(android.content.Intent) -> a
    void putExtra(android.content.Intent,java.lang.String,java.lang.String) -> a
    java.lang.String fillInCustomSearchURL(java.lang.String) -> j
com.google.zxing.client.android.result.ResultHandler$1 -> com.google.zxing.client.android.result.k:
    com.google.zxing.client.android.result.ResultHandler this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.google.zxing.client.android.result.ResultHandlerFactory -> com.google.zxing.client.android.result.l:
    com.google.zxing.client.android.result.ResultHandler makeResultHandler(com.google.zxing.client.android.CaptureActivity,com.google.zxing.Result) -> a
com.google.zxing.client.android.result.ResultHandlerFactory$1 -> com.google.zxing.client.android.result.m:
    int[] $SwitchMap$com$google$zxing$client$result$ParsedResultType -> a
com.google.zxing.client.android.result.SMSResultHandler -> com.google.zxing.client.android.result.n:
    int[] buttons -> a
    int getButtonCount() -> a
    int getButtonText(int) -> a
    void handleButtonPress(int) -> b
    java.lang.CharSequence getDisplayContents() -> b
    int getDisplayTitle() -> c
com.google.zxing.client.android.result.TelResultHandler -> com.google.zxing.client.android.result.o:
    int[] buttons -> a
    int getButtonCount() -> a
    int getButtonText(int) -> a
    void handleButtonPress(int) -> b
    java.lang.CharSequence getDisplayContents() -> b
    int getDisplayTitle() -> c
com.google.zxing.client.android.result.TextResultHandler -> com.google.zxing.client.android.result.p:
    int[] buttons -> a
    int getButtonCount() -> a
    int getButtonText(int) -> a
    void handleButtonPress(int) -> b
    int getDisplayTitle() -> c
com.google.zxing.client.android.result.URIResultHandler -> com.google.zxing.client.android.result.q:
    java.lang.String[] SECURE_PROTOCOLS -> a
    int[] buttons -> b
    int getButtonCount() -> a
    int getButtonText(int) -> a
    void handleButtonPress(int) -> b
    int getDisplayTitle() -> c
    boolean areContentsSecure() -> g
com.google.zxing.client.android.result.WifiResultHandler -> com.google.zxing.client.android.result.r:
    com.google.zxing.client.android.CaptureActivity parent -> a
    int getButtonCount() -> a
    int getButtonText(int) -> a
    void handleButtonPress(int) -> b
    java.lang.CharSequence getDisplayContents() -> b
    int getDisplayTitle() -> c
com.google.zxing.client.android.result.supplement.BookResultInfoRetriever -> com.google.zxing.client.android.result.supplement.a:
    java.lang.String isbn -> a
    java.lang.String source -> b
    android.content.Context context -> c
    void retrieveSupplementalInfo() -> a
com.google.zxing.client.android.result.supplement.KillerCallable -> com.google.zxing.client.android.result.supplement.b:
    java.util.concurrent.Future future -> a
    long timeout -> b
    java.util.concurrent.TimeUnit unit -> c
    java.lang.Void call() -> a
    java.lang.Object call() -> call
com.google.zxing.client.android.result.supplement.ProductResultInfoRetriever -> com.google.zxing.client.android.result.supplement.c:
    java.util.regex.Pattern PRODUCT_NAME_PRICE_PATTERN -> a
    java.lang.String productID -> b
    java.lang.String source -> c
    android.content.Context context -> d
    void retrieveSupplementalInfo() -> a
com.google.zxing.client.android.result.supplement.SupplementalInfoRetriever -> com.google.zxing.client.android.result.supplement.d:
    java.util.concurrent.ExecutorService executorInstance -> a
    java.lang.ref.WeakReference textViewRef -> b
    android.os.Handler handler -> c
    com.google.zxing.client.android.history.HistoryManager historyManager -> d
    java.util.concurrent.ExecutorService getExecutorService() -> b
    void maybeInvokeRetrieval(android.widget.TextView,com.google.zxing.client.result.ParsedResult,android.os.Handler,com.google.zxing.client.android.history.HistoryManager,android.content.Context) -> a
    void retrieveSupplementalInfo() -> a
    void append(java.lang.String,java.lang.String,java.lang.String[],java.lang.String) -> a
    java.lang.Object call() -> call
com.google.zxing.client.android.result.supplement.SupplementalInfoRetriever$1 -> com.google.zxing.client.android.result.supplement.e:
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
com.google.zxing.client.android.result.supplement.SupplementalInfoRetriever$2 -> com.google.zxing.client.android.result.supplement.f:
    android.widget.TextView val$textView -> a
    android.text.Spannable val$content -> b
    com.google.zxing.client.android.result.supplement.SupplementalInfoRetriever this$0 -> c
    void run() -> run
com.google.zxing.client.android.result.supplement.URIResultInfoRetriever -> com.google.zxing.client.android.result.supplement.g:
    com.google.zxing.client.result.URIParsedResult result -> a
    java.lang.String redirectString -> b
    void retrieveSupplementalInfo() -> a
com.google.zxing.client.android.share.AppPickerActivity -> com.google.zxing.client.android.share.AppPickerActivity:
    java.util.List labelsPackages -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
com.google.zxing.client.android.share.BookmarkAdapter -> com.google.zxing.client.android.share.a:
    android.content.Context context -> a
    android.database.Cursor cursor -> b
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.google.zxing.client.android.share.BookmarkPickerActivity -> com.google.zxing.client.android.share.BookmarkPickerActivity:
    java.lang.String[] BOOKMARK_PROJECTION -> a
    android.database.Cursor cursor -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
com.google.zxing.client.android.share.LoadPackagesAsyncTask -> com.google.zxing.client.android.share.b:
    java.lang.String[] PKG_PREFIX_WHITELIST -> a
    java.lang.String[] PKG_PREFIX_BLACKLIST -> b
    com.google.zxing.client.android.share.AppPickerActivity activity -> c
    void onPostExecute(java.util.List) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.google.zxing.client.android.share.LoadPackagesAsyncTask$ByFirstStringComparator -> com.google.zxing.client.android.share.c:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.zxing.client.android.share.ShareActivity -> com.google.zxing.client.android.share.ShareActivity:
    java.lang.String TAG -> a
    android.widget.Button clipboardButton -> b
    android.view.View$OnClickListener contactListener -> c
    android.view.View$OnClickListener bookmarkListener -> d
    android.view.View$OnClickListener appListener -> e
    android.view.View$OnClickListener clipboardListener -> f
    android.view.View$OnKeyListener textListener -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void showContactAsBarcode(android.net.Uri) -> a
    java.lang.String massageContactData(java.lang.String) -> a
    void access$000(com.google.zxing.client.android.share.ShareActivity,java.lang.String) -> a
com.google.zxing.client.android.share.ShareActivity$1 -> com.google.zxing.client.android.share.d:
    com.google.zxing.client.android.share.ShareActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.google.zxing.client.android.share.ShareActivity$2 -> com.google.zxing.client.android.share.e:
    com.google.zxing.client.android.share.ShareActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.google.zxing.client.android.share.ShareActivity$3 -> com.google.zxing.client.android.share.f:
    com.google.zxing.client.android.share.ShareActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.google.zxing.client.android.share.ShareActivity$4 -> com.google.zxing.client.android.share.g:
    com.google.zxing.client.android.share.ShareActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.google.zxing.client.android.share.ShareActivity$5 -> com.google.zxing.client.android.share.h:
    com.google.zxing.client.android.share.ShareActivity this$0 -> a
    boolean onKey(android.view.View,int,android.view.KeyEvent) -> onKey
com.google.zxing.client.android.wifi.NetworkType -> com.google.zxing.client.android.wifi.a:
    int WEP$2768aed0 -> a
    int WPA$2768aed0 -> b
    int NO_PASSWORD$2768aed0 -> c
    int[] $VALUES$24f51b35 -> d
    int forIntentValue$2efe6aa7(java.lang.String) -> a
com.google.zxing.client.android.wifi.WifiConfigManager -> com.google.zxing.client.android.wifi.b:
    java.lang.String TAG -> a
    java.util.regex.Pattern HEX_DIGITS -> b
    void configure(android.net.wifi.WifiManager,java.lang.String,java.lang.String,java.lang.String) -> a
    void updateNetwork(android.net.wifi.WifiManager,android.net.wifi.WifiConfiguration) -> a
    android.net.wifi.WifiConfiguration changeNetworkCommon(java.lang.String) -> a
    java.lang.String quoteNonHex(java.lang.String,int[]) -> a
    java.lang.String access$000() -> a
    void access$100(android.net.wifi.WifiManager,java.lang.String) -> a
    void access$200(android.net.wifi.WifiManager,java.lang.String,java.lang.String) -> a
    void access$300(android.net.wifi.WifiManager,java.lang.String,java.lang.String) -> b
com.google.zxing.client.android.wifi.WifiConfigManager$1 -> com.google.zxing.client.android.wifi.c:
    android.net.wifi.WifiManager val$wifiManager -> a
    java.lang.String val$networkTypeString -> b
    java.lang.String val$ssid -> c
    java.lang.String val$password -> d
    void run() -> run
com.google.zxing.client.result.AbstractDoCoMoResultParser -> com.google.zxing.client.result.a:
    java.lang.String[] matchDoCoMoPrefixedField$3d9ab706(java.lang.String,java.lang.String) -> a
    java.lang.String matchSingleDoCoMoPrefixedField(java.lang.String,java.lang.String,boolean) -> a
com.google.zxing.client.result.AddressBookAUResultParser -> com.google.zxing.client.result.b:
    java.lang.String[] matchMultipleValuePrefix$1d94d535(java.lang.String,java.lang.String) -> a
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.AddressBookDoCoMoResultParser -> com.google.zxing.client.result.c:
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.AddressBookParsedResult -> com.google.zxing.client.result.d:
    java.lang.String[] names -> a
    java.lang.String pronunciation -> b
    java.lang.String[] phoneNumbers -> c
    java.lang.String[] phoneTypes -> d
    java.lang.String[] emails -> e
    java.lang.String[] emailTypes -> f
    java.lang.String instantMessenger -> g
    java.lang.String note -> h
    java.lang.String[] addresses -> i
    java.lang.String[] addressTypes -> j
    java.lang.String org -> k
    java.lang.String birthday -> l
    java.lang.String title -> m
    java.lang.String url -> n
    java.lang.String[] getNames() -> a
    java.lang.String getPronunciation() -> b
    java.lang.String[] getPhoneNumbers() -> c
    java.lang.String[] getPhoneTypes() -> d
    java.lang.String[] getEmails() -> e
    java.lang.String[] getEmailTypes() -> f
    java.lang.String getInstantMessenger() -> g
    java.lang.String getNote() -> h
    java.lang.String[] getAddresses() -> i
    java.lang.String[] getAddressTypes() -> j
    java.lang.String getTitle() -> k
    java.lang.String getOrg() -> l
    java.lang.String getURL() -> m
    java.lang.String getBirthday() -> n
    java.lang.String getDisplayResult() -> o
com.google.zxing.client.result.BizcardResultParser -> com.google.zxing.client.result.e:
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.BookmarkDoCoMoResultParser -> com.google.zxing.client.result.f:
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.CalendarParsedResult -> com.google.zxing.client.result.g:
    java.lang.String summary -> a
    java.lang.String start -> b
    java.lang.String end -> c
    java.lang.String location -> d
    java.lang.String attendee -> e
    java.lang.String description -> f
    double latitude -> g
    double longitude -> h
    java.lang.String getSummary() -> a
    java.lang.String getStart() -> b
    java.lang.String getEnd() -> c
    java.lang.String getLocation() -> d
    java.lang.String getAttendee() -> e
    java.lang.String getDescription() -> f
    java.lang.String getDisplayResult() -> o
    void validateDate(java.lang.CharSequence) -> a
com.google.zxing.client.result.EmailAddressParsedResult -> com.google.zxing.client.result.h:
    java.lang.String emailAddress -> a
    java.lang.String subject -> b
    java.lang.String body -> c
    java.lang.String mailtoURI -> d
    java.lang.String getEmailAddress() -> a
    java.lang.String getSubject() -> b
    java.lang.String getBody() -> c
    java.lang.String getMailtoURI() -> d
    java.lang.String getDisplayResult() -> o
com.google.zxing.client.result.EmailAddressResultParser -> com.google.zxing.client.result.i:
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.EmailDoCoMoResultParser -> com.google.zxing.client.result.j:
    java.util.regex.Pattern ATEXT_ALPHANUMERIC -> a
    boolean isBasicallyValidEmailAddress(java.lang.String) -> a
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.ExpandedProductParsedResult -> com.google.zxing.client.result.k:
    java.lang.String productID -> a
    java.lang.String sscc -> b
    java.lang.String lotNumber -> c
    java.lang.String productionDate -> d
    java.lang.String packagingDate -> e
    java.lang.String bestBeforeDate -> f
    java.lang.String expirationDate -> g
    java.lang.String weight -> h
    java.lang.String weightType -> i
    java.lang.String weightIncrement -> j
    java.lang.String price -> k
    java.lang.String priceIncrement -> l
    java.lang.String priceCurrency -> m
    java.util.Map uncommonAIs -> n
    boolean equals(java.lang.Object) -> equals
    boolean equalsOrNull(java.lang.Object,java.lang.Object) -> a
    int hashCode() -> hashCode
    int hashNotNull(java.lang.Object) -> a
    java.lang.String getDisplayResult() -> o
com.google.zxing.client.result.ExpandedProductResultParser -> com.google.zxing.client.result.l:
    java.lang.String findAIvalue(int,java.lang.String) -> a
    java.lang.String findValue(int,java.lang.String) -> b
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.GeoParsedResult -> com.google.zxing.client.result.m:
    double latitude -> a
    double longitude -> b
    double altitude -> c
    java.lang.String query -> d
    java.lang.String getGeoURI() -> a
    double getLatitude() -> b
    double getLongitude() -> c
    java.lang.String getDisplayResult() -> o
com.google.zxing.client.result.GeoResultParser -> com.google.zxing.client.result.n:
    java.util.regex.Pattern GEO_URL_PATTERN -> a
    com.google.zxing.client.result.GeoParsedResult parse(com.google.zxing.Result) -> c
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.ISBNParsedResult -> com.google.zxing.client.result.o:
    java.lang.String isbn -> a
    java.lang.String getISBN() -> a
    java.lang.String getDisplayResult() -> o
com.google.zxing.client.result.ISBNResultParser -> com.google.zxing.client.result.p:
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.ParsedResult -> com.google.zxing.client.result.q:
    com.google.zxing.client.result.ParsedResultType type -> a
    com.google.zxing.client.result.ParsedResultType getType() -> p
    java.lang.String getDisplayResult() -> o
    java.lang.String toString() -> toString
    void maybeAppend(java.lang.String,java.lang.StringBuilder) -> a
    void maybeAppend(java.lang.String[],java.lang.StringBuilder) -> a
com.google.zxing.client.result.ParsedResultType -> com.google.zxing.client.result.r:
    com.google.zxing.client.result.ParsedResultType ADDRESSBOOK -> a
    com.google.zxing.client.result.ParsedResultType EMAIL_ADDRESS -> b
    com.google.zxing.client.result.ParsedResultType PRODUCT -> c
    com.google.zxing.client.result.ParsedResultType URI -> d
    com.google.zxing.client.result.ParsedResultType TEXT -> e
    com.google.zxing.client.result.ParsedResultType GEO -> f
    com.google.zxing.client.result.ParsedResultType TEL -> g
    com.google.zxing.client.result.ParsedResultType SMS -> h
    com.google.zxing.client.result.ParsedResultType CALENDAR -> i
    com.google.zxing.client.result.ParsedResultType WIFI -> j
    com.google.zxing.client.result.ParsedResultType ISBN -> k
    com.google.zxing.client.result.ParsedResultType[] $VALUES -> l
    com.google.zxing.client.result.ParsedResultType[] values() -> values
    com.google.zxing.client.result.ParsedResultType valueOf(java.lang.String) -> valueOf
com.google.zxing.client.result.ProductParsedResult -> com.google.zxing.client.result.s:
    java.lang.String productID -> a
    java.lang.String normalizedProductID -> b
    java.lang.String getProductID() -> a
    java.lang.String getNormalizedProductID() -> b
    java.lang.String getDisplayResult() -> o
com.google.zxing.client.result.ProductResultParser -> com.google.zxing.client.result.t:
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.ResultParser -> com.google.zxing.client.result.u:
    com.google.zxing.client.result.ResultParser[] PARSERS -> a
    java.util.regex.Pattern DIGITS -> b
    java.util.regex.Pattern ALPHANUM -> c
    java.util.regex.Pattern AMPERSAND -> d
    java.util.regex.Pattern EQUALS -> e
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
    com.google.zxing.client.result.ParsedResult parseResult(com.google.zxing.Result) -> b
    java.lang.String[] maybeWrap(java.lang.String) -> b
    java.lang.String unescapeBackslash(java.lang.String) -> a
    int parseHexDigit(char) -> a
    boolean isStringOfDigits$609be50e(java.lang.CharSequence) -> a
    java.util.Map parseNameValuePairs(java.lang.String) -> c
    java.lang.String[] matchPrefixedField(java.lang.String,java.lang.String,char,boolean) -> a
    java.lang.String matchSinglePrefixedField(java.lang.String,java.lang.String,char,boolean) -> b
com.google.zxing.client.result.SMSMMSResultParser -> com.google.zxing.client.result.v:
    void addNumberVia(java.util.Collection,java.util.Collection,java.lang.String) -> a
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.SMSParsedResult -> com.google.zxing.client.result.w:
    java.lang.String[] numbers -> a
    java.lang.String[] vias -> b
    java.lang.String subject -> c
    java.lang.String body -> d
    java.lang.String[] getNumbers() -> a
    java.lang.String getSubject() -> b
    java.lang.String getBody() -> c
    java.lang.String getDisplayResult() -> o
com.google.zxing.client.result.SMSTOMMSTOResultParser -> com.google.zxing.client.result.x:
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.SMTPResultParser -> com.google.zxing.client.result.y:
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.TelParsedResult -> com.google.zxing.client.result.z:
    java.lang.String number -> a
    java.lang.String telURI -> b
    java.lang.String title -> c
    java.lang.String getNumber() -> a
    java.lang.String getTelURI() -> b
    java.lang.String getDisplayResult() -> o
com.google.zxing.client.result.TelResultParser -> com.google.zxing.client.result.aa:
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.TextParsedResult -> com.google.zxing.client.result.ab:
    java.lang.String text -> a
    java.lang.String language -> b
    java.lang.String getDisplayResult() -> o
com.google.zxing.client.result.URIParsedResult -> com.google.zxing.client.result.ac:
    java.util.regex.Pattern USER_IN_HOST -> a
    java.lang.String uri -> b
    java.lang.String title -> c
    java.lang.String getURI() -> a
    java.lang.String getDisplayResult() -> o
    boolean isColonFollowedByPortNumber(java.lang.String,int) -> a
com.google.zxing.client.result.URIResultParser -> com.google.zxing.client.result.ad:
    java.util.regex.Pattern URL_WITH_PROTOCOL_PATTERN -> a
    java.util.regex.Pattern URL_WITHOUT_PROTOCOL_PATTERN -> b
    boolean isBasicallyValidURI(java.lang.CharSequence) -> b
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.URLTOResultParser -> com.google.zxing.client.result.ae:
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.VCardResultParser -> com.google.zxing.client.result.af:
    java.util.regex.Pattern BEGIN_VCARD -> a
    java.util.regex.Pattern VCARD_LIKE_DATE -> b
    java.util.regex.Pattern CR_LF_SPACE_TAB -> c
    java.util.regex.Pattern NEWLINE_ESCAPE -> d
    java.util.regex.Pattern VCARD_ESCAPES -> e
    java.util.regex.Pattern EQUALS -> f
    java.util.regex.Pattern SEMICOLON -> g
    java.util.List matchVCardPrefixedField(java.lang.CharSequence,java.lang.String,boolean) -> b
    java.lang.String decodeQuotedPrintable(java.lang.CharSequence,java.lang.String) -> a
    void maybeAppendFragment(java.io.ByteArrayOutputStream,java.lang.String,java.lang.StringBuilder) -> a
    java.util.List matchSingleVCardPrefixedField(java.lang.CharSequence,java.lang.String,boolean) -> a
    java.lang.String toPrimaryValue(java.util.List) -> a
    java.lang.String[] toPrimaryValues(java.util.Collection) -> a
    java.lang.String[] toTypes(java.util.Collection) -> b
    void maybeAppendComponent(java.lang.String[],int,java.lang.StringBuilder) -> a
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.VEventResultParser -> com.google.zxing.client.result.ag:
    com.google.zxing.client.result.CalendarParsedResult parse(com.google.zxing.Result) -> c
    java.lang.String matchSingleVCardPrefixedField$653aa82f(java.lang.CharSequence,java.lang.String) -> a
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.client.result.WifiParsedResult -> com.google.zxing.client.result.ah:
    java.lang.String ssid -> a
    java.lang.String networkEncryption -> b
    java.lang.String password -> c
    java.lang.String getSsid() -> a
    java.lang.String getNetworkEncryption() -> b
    java.lang.String getPassword() -> c
    java.lang.String getDisplayResult() -> o
com.google.zxing.client.result.WifiResultParser -> com.google.zxing.client.result.ai:
    com.google.zxing.client.result.ParsedResult parse(com.google.zxing.Result) -> a
com.google.zxing.common.BitArray -> com.google.zxing.common.a:
    int[] bits -> a
    int size -> b
    int getSize() -> a
    int getSizeInBytes() -> b
    void ensureCapacity(int) -> e
    boolean get(int) -> a
    void set(int) -> b
    int getNextSet(int) -> c
    int getNextUnset(int) -> d
    void clear() -> c
    boolean isRange$486912e3(int,int) -> a
    void appendBit(boolean) -> a
    void appendBits(int,int) -> b
    void appendBitArray(com.google.zxing.common.BitArray) -> a
    void xor(com.google.zxing.common.BitArray) -> b
    void toBytes$101cc16b(int,byte[],int) -> a
    void reverse() -> d
    int[] makeArray(int) -> f
    java.lang.String toString() -> toString
com.google.zxing.common.BitMatrix -> com.google.zxing.common.b:
    int width -> a
    int height -> b
    int rowSize -> c
    int[] bits -> d
    boolean get(int,int) -> a
    void set(int,int) -> b
    void flip(int,int) -> c
    void clear() -> a
    void setRegion(int,int,int,int) -> a
    int[] getEnclosingRectangle() -> b
    int[] getTopLeftOnBit() -> c
    int[] getBottomRightOnBit() -> d
    int getWidth() -> e
    int getHeight() -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.zxing.common.BitSource -> com.google.zxing.common.c:
    byte[] bytes -> a
    int byteOffset -> b
    int bitOffset -> c
    int getByteOffset() -> a
    int readBits(int) -> a
    int available() -> b
com.google.zxing.common.CharacterSetECI -> com.google.zxing.common.d:
    com.google.zxing.common.CharacterSetECI Cp437 -> a
    com.google.zxing.common.CharacterSetECI ISO8859_1 -> b
    com.google.zxing.common.CharacterSetECI ISO8859_2 -> c
    com.google.zxing.common.CharacterSetECI ISO8859_3 -> d
    com.google.zxing.common.CharacterSetECI ISO8859_4 -> e
    com.google.zxing.common.CharacterSetECI ISO8859_5 -> f
    com.google.zxing.common.CharacterSetECI ISO8859_6 -> g
    com.google.zxing.common.CharacterSetECI ISO8859_7 -> h
    com.google.zxing.common.CharacterSetECI ISO8859_8 -> i
    com.google.zxing.common.CharacterSetECI ISO8859_9 -> j
    com.google.zxing.common.CharacterSetECI ISO8859_10 -> k
    com.google.zxing.common.CharacterSetECI ISO8859_11 -> l
    com.google.zxing.common.CharacterSetECI ISO8859_13 -> m
    com.google.zxing.common.CharacterSetECI ISO8859_14 -> n
    com.google.zxing.common.CharacterSetECI ISO8859_15 -> o
    com.google.zxing.common.CharacterSetECI ISO8859_16 -> p
    com.google.zxing.common.CharacterSetECI SJIS -> q
    com.google.zxing.common.CharacterSetECI Cp1250 -> r
    com.google.zxing.common.CharacterSetECI Cp1251 -> s
    com.google.zxing.common.CharacterSetECI Cp1252 -> t
    com.google.zxing.common.CharacterSetECI Cp1256 -> u
    com.google.zxing.common.CharacterSetECI UnicodeBigUnmarked -> v
    com.google.zxing.common.CharacterSetECI UTF8 -> w
    com.google.zxing.common.CharacterSetECI ASCII -> x
    com.google.zxing.common.CharacterSetECI Big5 -> y
    com.google.zxing.common.CharacterSetECI GB18030 -> z
    com.google.zxing.common.CharacterSetECI EUC_KR -> A
    java.util.Map VALUE_TO_ECI -> B
    java.util.Map NAME_TO_ECI -> C
    int[] values -> D
    java.lang.String[] otherEncodingNames -> E
    com.google.zxing.common.CharacterSetECI[] $VALUES -> F
    com.google.zxing.common.CharacterSetECI[] values() -> values
    com.google.zxing.common.CharacterSetECI valueOf(java.lang.String) -> valueOf
    int getValue() -> a
    com.google.zxing.common.CharacterSetECI getCharacterSetECIByValue(int) -> a
    com.google.zxing.common.CharacterSetECI getCharacterSetECIByName(java.lang.String) -> a
com.google.zxing.common.DecoderResult -> com.google.zxing.common.e:
    byte[] rawBytes -> a
    java.lang.String text -> b
    java.util.List byteSegments -> c
    java.lang.String ecLevel -> d
    byte[] getRawBytes() -> a
    java.lang.String getText() -> b
    java.util.List getByteSegments() -> c
    java.lang.String getECLevel() -> d
com.google.zxing.common.DefaultGridSampler -> com.google.zxing.common.f:
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> a
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,com.google.zxing.common.PerspectiveTransform) -> a
com.google.zxing.common.DetectorResult -> com.google.zxing.common.g:
    com.google.zxing.common.BitMatrix bits -> a
    com.google.zxing.ResultPoint[] points -> b
    com.google.zxing.common.BitMatrix getBits() -> d
    com.google.zxing.ResultPoint[] getPoints() -> e
com.google.zxing.common.GlobalHistogramBinarizer -> com.google.zxing.common.h:
    byte[] luminances -> a
    int[] buckets -> b
    com.google.zxing.common.BitArray getBlackRow(int,com.google.zxing.common.BitArray) -> a
    com.google.zxing.common.BitMatrix getBlackMatrix() -> b
    void initArrays(int) -> a
    int estimateBlackPoint(int[]) -> a
com.google.zxing.common.GridSampler -> com.google.zxing.common.i:
    com.google.zxing.common.GridSampler gridSampler -> a
    com.google.zxing.common.GridSampler getInstance() -> a
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> a
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,com.google.zxing.common.PerspectiveTransform) -> a
com.google.zxing.common.HybridBinarizer -> com.google.zxing.common.j:
    com.google.zxing.common.BitMatrix matrix -> a
    com.google.zxing.common.BitMatrix getBlackMatrix() -> b
com.google.zxing.common.PerspectiveTransform -> com.google.zxing.common.k:
    float a11 -> a
    float a12 -> b
    float a13 -> c
    float a21 -> d
    float a22 -> e
    float a23 -> f
    float a31 -> g
    float a32 -> h
    float a33 -> i
    com.google.zxing.common.PerspectiveTransform quadrilateralToQuadrilateral(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> a
    void transformPoints(float[]) -> a
    com.google.zxing.common.PerspectiveTransform squareToQuadrilateral(float,float,float,float,float,float,float,float) -> a
com.google.zxing.common.StringUtils -> com.google.zxing.common.l:
    java.lang.String PLATFORM_DEFAULT_ENCODING -> a
    boolean ASSUME_SHIFT_JIS -> b
    java.lang.String guessEncoding(byte[],java.util.Map) -> a
com.google.zxing.common.detector.WhiteRectangleDetector -> com.google.zxing.common.detector.a:
    com.google.zxing.common.BitMatrix image -> a
    int height -> b
    int width -> c
    int leftInit -> d
    int rightInit -> e
    int downInit -> f
    int upInit -> g
    com.google.zxing.ResultPoint[] detect() -> a
    com.google.zxing.ResultPoint getBlackPointOnSegment(float,float,float,float) -> a
    boolean containsBlackPoint(int,int,int,boolean) -> a
com.google.zxing.common.reedsolomon.GenericGF -> com.google.zxing.common.reedsolomon.a:
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_12 -> a
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_10 -> b
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_6 -> c
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_PARAM -> d
    com.google.zxing.common.reedsolomon.GenericGF QR_CODE_FIELD_256 -> e
    com.google.zxing.common.reedsolomon.GenericGF DATA_MATRIX_FIELD_256 -> f
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_8 -> g
    com.google.zxing.common.reedsolomon.GenericGF MAXICODE_FIELD_64 -> h
    int[] expTable -> i
    int[] logTable -> j
    com.google.zxing.common.reedsolomon.GenericGFPoly zero -> k
    com.google.zxing.common.reedsolomon.GenericGFPoly one -> l
    int size -> m
    int primitive -> n
    boolean initialized -> o
    void initialize() -> d
    void checkInit() -> e
    com.google.zxing.common.reedsolomon.GenericGFPoly getZero() -> a
    com.google.zxing.common.reedsolomon.GenericGFPoly getOne() -> b
    com.google.zxing.common.reedsolomon.GenericGFPoly buildMonomial(int,int) -> a
    int addOrSubtract(int,int) -> b
    int exp(int) -> a
    int log(int) -> b
    int inverse(int) -> c
    int multiply(int,int) -> c
    int getSize() -> c
com.google.zxing.common.reedsolomon.GenericGFPoly -> com.google.zxing.common.reedsolomon.b:
    com.google.zxing.common.reedsolomon.GenericGF field -> a
    int[] coefficients -> b
    int[] getCoefficients() -> a
    int getDegree() -> b
    boolean isZero() -> c
    int getCoefficient(int) -> a
    int evaluateAt(int) -> b
    com.google.zxing.common.reedsolomon.GenericGFPoly addOrSubtract(com.google.zxing.common.reedsolomon.GenericGFPoly) -> a
    com.google.zxing.common.reedsolomon.GenericGFPoly multiply(com.google.zxing.common.reedsolomon.GenericGFPoly) -> b
    com.google.zxing.common.reedsolomon.GenericGFPoly multiply(int) -> c
    com.google.zxing.common.reedsolomon.GenericGFPoly multiplyByMonomial(int,int) -> a
    com.google.zxing.common.reedsolomon.GenericGFPoly[] divide(com.google.zxing.common.reedsolomon.GenericGFPoly) -> c
    java.lang.String toString() -> toString
com.google.zxing.common.reedsolomon.ReedSolomonDecoder -> com.google.zxing.common.reedsolomon.c:
    com.google.zxing.common.reedsolomon.GenericGF field -> a
    void decode(int[],int) -> a
com.google.zxing.common.reedsolomon.ReedSolomonEncoder -> com.google.zxing.common.reedsolomon.d:
    com.google.zxing.common.reedsolomon.GenericGF field -> a
    java.util.List cachedGenerators -> b
    com.google.zxing.common.reedsolomon.GenericGFPoly buildGenerator(int) -> a
    void encode(int[],int) -> a
com.google.zxing.common.reedsolomon.ReedSolomonException -> com.google.zxing.common.reedsolomon.e:
com.google.zxing.datamatrix.DataMatrixReader -> com.google.zxing.datamatrix.a:
    com.google.zxing.ResultPoint[] NO_POINTS -> a
    com.google.zxing.datamatrix.decoder.Decoder decoder -> b
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    void reset() -> a
com.google.zxing.datamatrix.decoder.BitMatrixParser -> com.google.zxing.datamatrix.decoder.a:
    com.google.zxing.common.BitMatrix mappingBitMatrix -> a
    com.google.zxing.common.BitMatrix readMappingMatrix -> b
    com.google.zxing.datamatrix.decoder.Version version -> c
    com.google.zxing.datamatrix.decoder.Version getVersion() -> a
    byte[] readCodewords() -> b
    boolean readModule(int,int,int,int) -> a
    int readUtah(int,int,int,int) -> b
    com.google.zxing.common.BitMatrix extractDataRegion(com.google.zxing.common.BitMatrix) -> a
com.google.zxing.datamatrix.decoder.DataBlock -> com.google.zxing.datamatrix.decoder.b:
    int numDataCodewords -> a
    byte[] codewords -> b
    com.google.zxing.datamatrix.decoder.DataBlock[] getDataBlocks(byte[],com.google.zxing.datamatrix.decoder.Version) -> a
    int getNumDataCodewords() -> a
    byte[] getCodewords() -> b
com.google.zxing.datamatrix.decoder.DecodedBitStreamParser -> com.google.zxing.datamatrix.decoder.c:
    char[] C40_BASIC_SET_CHARS -> a
    char[] C40_SHIFT2_SET_CHARS -> b
    char[] TEXT_BASIC_SET_CHARS -> c
    char[] TEXT_SHIFT3_SET_CHARS -> d
    com.google.zxing.common.DecoderResult decode(byte[]) -> a
    int decodeAsciiSegment$68058d11(com.google.zxing.common.BitSource,java.lang.StringBuilder,java.lang.StringBuilder) -> a
    void decodeC40Segment(com.google.zxing.common.BitSource,java.lang.StringBuilder) -> a
    void decodeTextSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder) -> b
    void decodeAnsiX12Segment(com.google.zxing.common.BitSource,java.lang.StringBuilder) -> c
    void parseTwoBytes(int,int,int[]) -> a
    void decodeEdifactSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder) -> d
    void decodeBase256Segment(com.google.zxing.common.BitSource,java.lang.StringBuilder,java.util.Collection) -> a
    int unrandomize255State(int,int) -> a
com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$1 -> com.google.zxing.datamatrix.decoder.d:
    int[] $SwitchMap$com$google$zxing$datamatrix$decoder$DecodedBitStreamParser$Mode -> a
com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode -> com.google.zxing.datamatrix.decoder.e:
    int PAD_ENCODE$6e85352 -> a
    int ASCII_ENCODE$6e85352 -> b
    int C40_ENCODE$6e85352 -> c
    int TEXT_ENCODE$6e85352 -> d
    int ANSIX12_ENCODE$6e85352 -> e
    int EDIFACT_ENCODE$6e85352 -> f
    int BASE256_ENCODE$6e85352 -> g
    int[] $VALUES$3a3249a9 -> h
    int[] values$68f9f718() -> a
com.google.zxing.datamatrix.decoder.Decoder -> com.google.zxing.datamatrix.decoder.f:
    com.google.zxing.common.reedsolomon.ReedSolomonDecoder rsDecoder -> a
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix) -> a
com.google.zxing.datamatrix.decoder.Version -> com.google.zxing.datamatrix.decoder.g:
    com.google.zxing.datamatrix.decoder.Version[] VERSIONS -> a
    int versionNumber -> b
    int symbolSizeRows -> c
    int symbolSizeColumns -> d
    int dataRegionSizeRows -> e
    int dataRegionSizeColumns -> f
    com.google.zxing.datamatrix.decoder.Version$ECBlocks ecBlocks -> g
    int totalCodewords -> h
    int getVersionNumber() -> a
    int getSymbolSizeRows() -> b
    int getSymbolSizeColumns() -> c
    int getDataRegionSizeRows() -> d
    int getDataRegionSizeColumns() -> e
    int getTotalCodewords() -> f
    com.google.zxing.datamatrix.decoder.Version$ECBlocks getECBlocks() -> g
    com.google.zxing.datamatrix.decoder.Version getVersionForDimensions(int,int) -> a
    java.lang.String toString() -> toString
com.google.zxing.datamatrix.decoder.Version$ECB -> com.google.zxing.datamatrix.decoder.h:
    int count -> a
    int dataCodewords -> b
    int getCount() -> a
    int getDataCodewords() -> b
com.google.zxing.datamatrix.decoder.Version$ECBlocks -> com.google.zxing.datamatrix.decoder.i:
    int ecCodewords -> a
    com.google.zxing.datamatrix.decoder.Version$ECB[] ecBlocks -> b
    int getECCodewords() -> a
    com.google.zxing.datamatrix.decoder.Version$ECB[] getECBlocks() -> b
com.google.zxing.datamatrix.detector.Detector -> com.google.zxing.datamatrix.detector.a:
    com.google.zxing.common.BitMatrix image -> a
    com.google.zxing.common.detector.WhiteRectangleDetector rectangleDetector -> b
    com.google.zxing.common.DetectorResult detect() -> a
    boolean isValid(com.google.zxing.ResultPoint) -> a
    int distance(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> a
    void increment(java.util.Map,com.google.zxing.ResultPoint) -> a
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int,int) -> a
    com.google.zxing.datamatrix.detector.Detector$ResultPointsAndTransitions transitionsBetween(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> b
com.google.zxing.datamatrix.detector.Detector$ResultPointsAndTransitions -> com.google.zxing.datamatrix.detector.b:
    com.google.zxing.ResultPoint from -> a
    com.google.zxing.ResultPoint to -> b
    int transitions -> c
    com.google.zxing.ResultPoint getFrom() -> a
    com.google.zxing.ResultPoint getTo() -> b
    int getTransitions() -> c
    java.lang.String toString() -> toString
com.google.zxing.datamatrix.detector.Detector$ResultPointsAndTransitionsComparator -> com.google.zxing.datamatrix.detector.c:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.zxing.maxicode.MaxiCodeReader -> com.google.zxing.maxicode.a:
    com.google.zxing.ResultPoint[] NO_POINTS -> a
    com.google.zxing.maxicode.decoder.Decoder decoder -> b
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    void reset() -> a
com.google.zxing.maxicode.decoder.BitMatrixParser -> com.google.zxing.maxicode.decoder.a:
    int[][] BITNR -> a
    com.google.zxing.common.BitMatrix bitMatrix -> b
    byte[] readCodewords() -> a
com.google.zxing.maxicode.decoder.DecodedBitStreamParser -> com.google.zxing.maxicode.decoder.b:
    java.text.NumberFormat NINE_DIGITS -> a
    java.text.NumberFormat THREE_DIGITS -> b
    java.lang.String[] SETS -> c
    com.google.zxing.common.DecoderResult decode(byte[],int) -> a
    int getInt(byte[],byte[]) -> a
    java.lang.String getMessage(byte[],int,int) -> a
com.google.zxing.maxicode.decoder.Decoder -> com.google.zxing.maxicode.decoder.c:
    com.google.zxing.common.reedsolomon.ReedSolomonDecoder rsDecoder -> a
    com.google.zxing.common.DecoderResult decode$7a1b6c9(com.google.zxing.common.BitMatrix) -> a
    void correctErrors(byte[],int,int,int,int) -> a
com.google.zxing.oned.CodaBarReader -> com.google.zxing.oned.a:
    char[] ALPHABET -> a
    int[] CHARACTER_ENCODINGS -> b
    char[] STARTEND_ENCODING -> c
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    int[] findAsteriskPattern(com.google.zxing.common.BitArray) -> a
    boolean arrayContains(char[],char) -> a
    char toNarrowWidePattern(int[]) -> a
com.google.zxing.oned.CodaBarWriter -> com.google.zxing.oned.b:
    byte[] encode(java.lang.String) -> a
com.google.zxing.oned.Code128Reader -> com.google.zxing.oned.c:
    int[][] CODE_PATTERNS -> a
    int decodeCode(com.google.zxing.common.BitArray,int[],int) -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
com.google.zxing.oned.Code128Writer -> com.google.zxing.oned.d:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    byte[] encode(java.lang.String) -> a
    boolean isDigits(java.lang.CharSequence,int,int) -> a
com.google.zxing.oned.Code39Reader -> com.google.zxing.oned.e:
    char[] ALPHABET -> b
    int[] CHARACTER_ENCODINGS -> a
    int ASTERISK_ENCODING -> c
    boolean usingCheckDigit -> d
    boolean extendedMode -> e
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    int toNarrowWidePattern(int[]) -> a
    char patternToChar(int) -> a
    java.lang.String decodeExtended(java.lang.CharSequence) -> a
com.google.zxing.oned.Code39Writer -> com.google.zxing.oned.f:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    byte[] encode(java.lang.String) -> a
    void toIntArray(int,int[]) -> a
com.google.zxing.oned.Code93Reader -> com.google.zxing.oned.g:
    char[] ALPHABET -> a
    int[] CHARACTER_ENCODINGS -> b
    int ASTERISK_ENCODING -> c
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    int toPattern(int[]) -> a
    char patternToChar(int) -> a
    java.lang.String decodeExtended(java.lang.CharSequence) -> a
    void checkOneChecksum(java.lang.CharSequence,int,int) -> a
com.google.zxing.oned.EAN13Reader -> com.google.zxing.oned.h:
    int[] FIRST_DIGIT_ENCODINGS -> a
    int[] decodeMiddleCounters -> f
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> b
com.google.zxing.oned.EAN13Writer -> com.google.zxing.oned.i:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    byte[] encode(java.lang.String) -> a
com.google.zxing.oned.EAN8Reader -> com.google.zxing.oned.j:
    int[] decodeMiddleCounters -> a
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> b
com.google.zxing.oned.EAN8Writer -> com.google.zxing.oned.k:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    byte[] encode(java.lang.String) -> a
com.google.zxing.oned.EANManufacturerOrgSupport -> com.google.zxing.oned.l:
    java.util.List ranges -> a
    java.util.List countryIdentifiers -> b
    java.lang.String lookupCountryIdentifier(java.lang.String) -> a
    void add(int[],java.lang.String) -> a
    void initIfNeeded() -> a
com.google.zxing.oned.ITFReader -> com.google.zxing.oned.m:
    int[] DEFAULT_ALLOWED_LENGTHS -> b
    int narrowLineWidth -> c
    int[] START_PATTERN -> d
    int[] END_PATTERN_REVERSED -> e
    int[][] PATTERNS -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void decodeMiddle(com.google.zxing.common.BitArray,int,int,java.lang.StringBuilder) -> a
    void validateQuietZone(com.google.zxing.common.BitArray,int) -> a
    int skipWhiteSpace(com.google.zxing.common.BitArray) -> a
    int[] decodeEnd(com.google.zxing.common.BitArray) -> b
    int[] findGuardPattern(com.google.zxing.common.BitArray,int,int[]) -> c
    int decodeDigit(int[]) -> a
com.google.zxing.oned.ITFWriter -> com.google.zxing.oned.n:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    byte[] encode(java.lang.String) -> a
com.google.zxing.oned.MultiFormatOneDReader -> com.google.zxing.oned.o:
    com.google.zxing.oned.OneDReader[] readers -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void reset() -> a
com.google.zxing.oned.MultiFormatUPCEANReader -> com.google.zxing.oned.p:
    com.google.zxing.oned.UPCEANReader[] readers -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void reset() -> a
com.google.zxing.oned.OneDReader -> com.google.zxing.oned.q:
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    void reset() -> a
    com.google.zxing.Result doDecode(com.google.zxing.BinaryBitmap,java.util.Map) -> b
    void recordPattern(com.google.zxing.common.BitArray,int,int[]) -> a
    void recordPatternInReverse(com.google.zxing.common.BitArray,int,int[]) -> b
    int patternMatchVariance(int[],int[],int) -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
com.google.zxing.oned.OneDimensionalCodeWriter -> com.google.zxing.oned.r:
    int sidesMargin -> a
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    com.google.zxing.common.BitMatrix renderResult(byte[],int,int) -> a
    int appendPattern(byte[],int,int[],int) -> a
    byte[] encode(java.lang.String) -> a
com.google.zxing.oned.UPCAReader -> com.google.zxing.oned.s:
    com.google.zxing.oned.UPCEANReader ean13Reader -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int[],java.util.Map) -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> b
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
    com.google.zxing.Result maybeReturnResult(com.google.zxing.Result) -> a
com.google.zxing.oned.UPCAWriter -> com.google.zxing.oned.t:
    com.google.zxing.oned.EAN13Writer subWriter -> a
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    java.lang.String preencode(java.lang.String) -> a
com.google.zxing.oned.UPCEANExtensionSupport -> com.google.zxing.oned.u:
    int[] EXTENSION_START_PATTERN -> a
    int[] CHECK_DIGIT_ENCODINGS -> b
    int[] decodeMiddleCounters -> c
    java.lang.StringBuilder decodeRowStringBuffer -> d
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int) -> a
com.google.zxing.oned.UPCEANReader -> com.google.zxing.oned.v:
    int[] START_END_PATTERN -> b
    int[] MIDDLE_PATTERN -> c
    int[][] L_PATTERNS -> d
    int[][] L_AND_G_PATTERNS -> e
    java.lang.StringBuilder decodeRowStringBuffer -> a
    com.google.zxing.oned.UPCEANExtensionSupport extensionReader -> f
    com.google.zxing.oned.EANManufacturerOrgSupport eanManSupport -> g
    int[] findStartGuardPattern(com.google.zxing.common.BitArray) -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int[],java.util.Map) -> a
    boolean checkChecksum(java.lang.String) -> a
    int[] decodeEnd(com.google.zxing.common.BitArray,int) -> a
    int[] findGuardPattern(com.google.zxing.common.BitArray,int,boolean,int[]) -> a
    int[] findGuardPattern(com.google.zxing.common.BitArray,int,boolean,int[],int[]) -> a
    int decodeDigit(com.google.zxing.common.BitArray,int[],int,int[][]) -> a
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> b
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
com.google.zxing.oned.UPCEANWriter -> com.google.zxing.oned.w:
com.google.zxing.oned.UPCEReader -> com.google.zxing.oned.x:
    int[] MIDDLE_END_PATTERN -> a
    int[][] NUMSYS_AND_CHECK_DIGIT_PATTERNS -> f
    int[] decodeMiddleCounters -> g
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
    int[] decodeEnd(com.google.zxing.common.BitArray,int) -> a
    boolean checkChecksum(java.lang.String) -> a
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> b
    java.lang.String convertUPCEtoUPCA(java.lang.String) -> b
com.google.zxing.oned.rss.AbstractRSSReader -> com.google.zxing.oned.rss.a:
    int[] decodeFinderCounters -> a
    int[] dataCharacterCounters -> b
    float[] oddRoundingErrors -> c
    float[] evenRoundingErrors -> d
    int[] oddCounts -> e
    int[] evenCounts -> f
    int[] getDecodeFinderCounters() -> b
    int[] getDataCharacterCounters() -> c
    float[] getOddRoundingErrors() -> d
    float[] getEvenRoundingErrors() -> e
    int[] getOddCounts() -> f
    int[] getEvenCounts() -> g
    int parseFinderValue(int[],int[][]) -> a
    int count(int[]) -> a
    void increment(int[],float[]) -> a
    void decrement(int[],float[]) -> b
    boolean isFinderPattern(int[]) -> b
com.google.zxing.oned.rss.DataCharacter -> com.google.zxing.oned.rss.b:
    int value -> a
    int checksumPortion -> b
    int getValue() -> a
    int getChecksumPortion() -> b
com.google.zxing.oned.rss.FinderPattern -> com.google.zxing.oned.rss.c:
    int value -> a
    int[] startEnd -> b
    com.google.zxing.ResultPoint[] resultPoints -> c
    int getValue() -> a
    int[] getStartEnd() -> b
    com.google.zxing.ResultPoint[] getResultPoints() -> c
com.google.zxing.oned.rss.Pair -> com.google.zxing.oned.rss.d:
    com.google.zxing.oned.rss.FinderPattern finderPattern -> a
    int count -> b
    com.google.zxing.oned.rss.FinderPattern getFinderPattern() -> c
    int getCount() -> d
    void incrementCount() -> e
com.google.zxing.oned.rss.RSS14Reader -> com.google.zxing.oned.rss.e:
    int[] OUTSIDE_EVEN_TOTAL_SUBSET -> a
    int[] INSIDE_ODD_TOTAL_SUBSET -> b
    int[] OUTSIDE_GSUM -> c
    int[] INSIDE_GSUM -> d
    int[] OUTSIDE_ODD_WIDEST -> e
    int[] INSIDE_ODD_WIDEST -> f
    int[][] FINDER_PATTERNS -> g
    java.util.List possibleLeftPairs -> h
    java.util.List possibleRightPairs -> i
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void addOrTally(java.util.Collection,com.google.zxing.oned.rss.Pair) -> a
    void reset() -> a
    com.google.zxing.oned.rss.Pair decodePair(com.google.zxing.common.BitArray,boolean,int,java.util.Map) -> a
    com.google.zxing.oned.rss.DataCharacter decodeDataCharacter(com.google.zxing.common.BitArray,com.google.zxing.oned.rss.FinderPattern,boolean) -> a
com.google.zxing.oned.rss.RSSUtils -> com.google.zxing.oned.rss.f:
    int getRSSvalue(int[],int,boolean) -> a
    int combins(int,int) -> a
com.google.zxing.oned.rss.expanded.ExpandedPair -> com.google.zxing.oned.rss.expanded.a:
    boolean mayBeLast -> a
    com.google.zxing.oned.rss.DataCharacter leftChar -> b
    com.google.zxing.oned.rss.DataCharacter rightChar -> c
    com.google.zxing.oned.rss.FinderPattern finderPattern -> d
    boolean mayBeLast() -> a
    com.google.zxing.oned.rss.DataCharacter getLeftChar() -> b
    com.google.zxing.oned.rss.DataCharacter getRightChar() -> c
    com.google.zxing.oned.rss.FinderPattern getFinderPattern() -> d
    boolean mustBeLast() -> e
com.google.zxing.oned.rss.expanded.RSSExpandedReader -> com.google.zxing.oned.rss.expanded.b:
    int[] SYMBOL_WIDEST -> a
    int[] EVEN_TOTAL_SUBSET -> b
    int[] GSUM -> c
    int[][] FINDER_PATTERNS -> d
    int[][] WEIGHTS -> e
    int[][] FINDER_PATTERN_SEQUENCES -> f
    int LONGEST_SEQUENCE_SIZE -> g
    java.util.List pairs -> h
    int[] startEnd -> i
    int[] currentSequence -> j
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void reset() -> a
    com.google.zxing.oned.rss.expanded.ExpandedPair retrieveNextPair(com.google.zxing.common.BitArray,java.util.List,int) -> a
    void reverseCounters(int[]) -> c
    com.google.zxing.oned.rss.FinderPattern parseFoundFinderPattern(com.google.zxing.common.BitArray,int,boolean) -> a
    com.google.zxing.oned.rss.DataCharacter decodeDataCharacter(com.google.zxing.common.BitArray,com.google.zxing.oned.rss.FinderPattern,boolean,boolean) -> a
    boolean isNotA1left(com.google.zxing.oned.rss.FinderPattern,boolean,boolean) -> a
com.google.zxing.oned.rss.expanded.decoders.AI013103decoder -> com.google.zxing.oned.rss.expanded.decoders.a:
    void addWeightCode(java.lang.StringBuilder,int) -> a
    int checkWeight(int) -> a
com.google.zxing.oned.rss.expanded.decoders.AI01320xDecoder -> com.google.zxing.oned.rss.expanded.decoders.b:
    void addWeightCode(java.lang.StringBuilder,int) -> a
    int checkWeight(int) -> a
com.google.zxing.oned.rss.expanded.decoders.AI01392xDecoder -> com.google.zxing.oned.rss.expanded.decoders.c:
    java.lang.String parseInformation() -> a
com.google.zxing.oned.rss.expanded.decoders.AI01393xDecoder -> com.google.zxing.oned.rss.expanded.decoders.d:
    java.lang.String parseInformation() -> a
com.google.zxing.oned.rss.expanded.decoders.AI013x0x1xDecoder -> com.google.zxing.oned.rss.expanded.decoders.e:
    java.lang.String dateCode -> a
    java.lang.String firstAIdigits -> b
    java.lang.String parseInformation() -> a
    void addWeightCode(java.lang.StringBuilder,int) -> a
    int checkWeight(int) -> a
com.google.zxing.oned.rss.expanded.decoders.AI013x0xDecoder -> com.google.zxing.oned.rss.expanded.decoders.f:
    java.lang.String parseInformation() -> a
com.google.zxing.oned.rss.expanded.decoders.AI01AndOtherAIs -> com.google.zxing.oned.rss.expanded.decoders.g:
    java.lang.String parseInformation() -> a
com.google.zxing.oned.rss.expanded.decoders.AI01decoder -> com.google.zxing.oned.rss.expanded.decoders.h:
    void encodeCompressedGtin(java.lang.StringBuilder,int) -> b
    void encodeCompressedGtinWithoutAI(java.lang.StringBuilder,int,int) -> a
com.google.zxing.oned.rss.expanded.decoders.AI01weightDecoder -> com.google.zxing.oned.rss.expanded.decoders.i:
    void encodeCompressedWeight(java.lang.StringBuilder,int,int) -> b
    void addWeightCode(java.lang.StringBuilder,int) -> a
    int checkWeight(int) -> a
com.google.zxing.oned.rss.expanded.decoders.AbstractExpandedDecoder -> com.google.zxing.oned.rss.expanded.decoders.j:
    com.google.zxing.common.BitArray information -> a
    com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder generalDecoder -> b
    com.google.zxing.common.BitArray getInformation() -> b
    com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder getGeneralDecoder() -> c
    java.lang.String parseInformation() -> a
    com.google.zxing.oned.rss.expanded.decoders.AbstractExpandedDecoder createDecoder(com.google.zxing.common.BitArray) -> a
com.google.zxing.oned.rss.expanded.decoders.AnyAIDecoder -> com.google.zxing.oned.rss.expanded.decoders.k:
    java.lang.String parseInformation() -> a
com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult -> com.google.zxing.oned.rss.expanded.decoders.l:
    com.google.zxing.oned.rss.expanded.decoders.DecodedInformation decodedInformation -> a
    boolean finished -> b
    com.google.zxing.oned.rss.expanded.decoders.DecodedInformation getDecodedInformation() -> a
    boolean isFinished() -> b
com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState -> com.google.zxing.oned.rss.expanded.decoders.m:
    int position -> a
    int encoding$1376b33b -> b
    int getPosition() -> a
    void setPosition(int) -> a
    void incrementPosition(int) -> b
    boolean isAlpha() -> b
    boolean isIsoIec646() -> c
    void setNumeric() -> d
    void setAlpha() -> e
    void setIsoIec646() -> f
com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State -> com.google.zxing.oned.rss.expanded.decoders.n:
    int NUMERIC$1376b33b -> a
    int ALPHA$1376b33b -> b
    int ISO_IEC_646$1376b33b -> c
    int[] $VALUES$3d17980a -> d
com.google.zxing.oned.rss.expanded.decoders.DecodedChar -> com.google.zxing.oned.rss.expanded.decoders.o:
    char value -> a
    char getValue() -> a
    boolean isFNC1() -> b
com.google.zxing.oned.rss.expanded.decoders.DecodedInformation -> com.google.zxing.oned.rss.expanded.decoders.p:
    java.lang.String newString -> a
    int remainingValue -> b
    boolean remaining -> c
    java.lang.String getNewString() -> a
    boolean isRemaining() -> b
    int getRemainingValue() -> c
com.google.zxing.oned.rss.expanded.decoders.DecodedNumeric -> com.google.zxing.oned.rss.expanded.decoders.q:
    int firstDigit -> a
    int secondDigit -> b
    int getFirstDigit() -> a
    int getSecondDigit() -> b
    boolean isFirstDigitFNC1() -> c
    boolean isSecondDigitFNC1() -> d
com.google.zxing.oned.rss.expanded.decoders.DecodedObject -> com.google.zxing.oned.rss.expanded.decoders.r:
    int newPosition -> a
    int getNewPosition() -> e
com.google.zxing.oned.rss.expanded.decoders.FieldParser -> com.google.zxing.oned.rss.expanded.decoders.s:
    java.lang.Object VARIABLE_LENGTH -> a
    java.lang.Object[][] TWO_DIGIT_DATA_LENGTH -> b
    java.lang.Object[][] THREE_DIGIT_DATA_LENGTH -> c
    java.lang.Object[][] THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH -> d
    java.lang.Object[][] FOUR_DIGIT_DATA_LENGTH -> e
    java.lang.String parseFieldsInGeneralPurpose(java.lang.String) -> a
    java.lang.String processFixedAI(int,int,java.lang.String) -> a
    java.lang.String processVariableAI(int,int,java.lang.String) -> b
com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder -> com.google.zxing.oned.rss.expanded.decoders.t:
    com.google.zxing.common.BitArray information -> a
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState current -> b
    java.lang.StringBuilder buffer -> c
    java.lang.String decodeAllCodes(java.lang.StringBuilder,int) -> a
    int extractNumericValueFromBitArray(int,int) -> a
    int extractNumericValueFromBitArray(com.google.zxing.common.BitArray,int,int) -> a
    com.google.zxing.oned.rss.expanded.decoders.DecodedInformation decodeGeneralPurposeField(int,java.lang.String) -> a
    com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult parseNumericBlock() -> a
    com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult parseIsoIec646Block() -> b
    boolean isAlphaTo646ToAlphaLatch(int) -> a
    boolean isAlphaOr646ToNumericLatch(int) -> b
com.google.zxing.pdf417.PDF417Reader -> com.google.zxing.pdf417.a:
    com.google.zxing.ResultPoint[] NO_POINTS -> a
    com.google.zxing.pdf417.decoder.Decoder decoder -> b
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    void reset() -> a
com.google.zxing.pdf417.decoder.BitMatrixParser -> com.google.zxing.pdf417.decoder.a:
    int[] NO_ERRORS -> a
    com.google.zxing.common.BitMatrix bitMatrix -> b
    int rows -> c
    int leftColumnECData -> d
    int rightColumnECData -> e
    int eraseCount -> f
    int[] erasures -> g
    int ecLevel -> h
    int[] SYMBOL_TABLE -> i
    int[] CODEWORD_TABLE -> j
    int[] readCodewords() -> a
    int[] trimArray(int[],int) -> a
    int processRow(int[],int,int,int[],int) -> a
    int getCodeword(long) -> a
    int[] getErasures() -> b
    int getECLevel() -> c
com.google.zxing.pdf417.decoder.DecodedBitStreamParser -> com.google.zxing.pdf417.decoder.b:
    char[] PUNCT_CHARS -> a
    char[] MIXED_CHARS -> b
    java.math.BigInteger[] EXP900 -> c
    com.google.zxing.common.DecoderResult decode(int[]) -> a
    int textCompaction(int[],int,java.lang.StringBuilder) -> a
    int byteCompaction(int,int[],int,java.lang.StringBuilder) -> a
    int numericCompaction(int[],int,java.lang.StringBuilder) -> b
com.google.zxing.pdf417.decoder.DecodedBitStreamParser$1 -> com.google.zxing.pdf417.decoder.c:
    int[] $SwitchMap$com$google$zxing$pdf417$decoder$DecodedBitStreamParser$Mode -> a
com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode -> com.google.zxing.pdf417.decoder.d:
    int ALPHA$72b0c14b -> a
    int LOWER$72b0c14b -> b
    int MIXED$72b0c14b -> c
    int PUNCT$72b0c14b -> d
    int ALPHA_SHIFT$72b0c14b -> e
    int PUNCT_SHIFT$72b0c14b -> f
    int[] $VALUES$3f80ec3a -> g
    int[] values$a5b57b() -> a
com.google.zxing.pdf417.decoder.Decoder -> com.google.zxing.pdf417.decoder.e:
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix) -> a
com.google.zxing.pdf417.detector.Detector -> com.google.zxing.pdf417.detector.a:
    int[] START_PATTERN -> a
    int[] START_PATTERN_REVERSE -> b
    int[] STOP_PATTERN -> c
    int[] STOP_PATTERN_REVERSE -> d
    com.google.zxing.BinaryBitmap image -> e
    com.google.zxing.common.DetectorResult detect$4a58903f() -> a
    void correctCodeWordVertices(com.google.zxing.ResultPoint[],boolean) -> a
    int[] findGuardPattern(com.google.zxing.common.BitMatrix,int,int,int,boolean,int[],int[]) -> a
com.google.zxing.pdf417.encoder.BarcodeMatrix -> com.google.zxing.pdf417.encoder.a:
    com.google.zxing.pdf417.encoder.BarcodeRow[] matrix -> a
    int currentRow -> b
    int height -> c
    int width -> d
    void startRow() -> a
    com.google.zxing.pdf417.encoder.BarcodeRow getCurrentRow() -> b
    byte[][] getScaledMatrix(int,int) -> a
com.google.zxing.pdf417.encoder.BarcodeRow -> com.google.zxing.pdf417.encoder.b:
    byte[] row -> a
    int currentLocation -> b
    void addBar(boolean,int) -> a
    byte[] getScaledRow(int) -> a
com.google.zxing.pdf417.encoder.Compaction -> com.google.zxing.pdf417.encoder.c:
    int AUTO$433c98a3 -> a
    int TEXT$433c98a3 -> b
    int BYTE$433c98a3 -> c
    int NUMERIC$433c98a3 -> d
    int[] $VALUES$3a61bc7e -> e
com.google.zxing.pdf417.encoder.PDF417 -> com.google.zxing.pdf417.encoder.d:
    int[][] CODEWORD_TABLE -> a
    com.google.zxing.pdf417.encoder.BarcodeMatrix barcodeMatrix -> b
    boolean compact -> c
    int compaction$433c98a3 -> d
    int minCols -> e
    int maxCols -> f
    int maxRows -> g
    int minRows -> h
    com.google.zxing.pdf417.encoder.BarcodeMatrix getBarcodeMatrix() -> a
    int calculateNumberOfRows(int,int,int) -> a
    void encodeChar(int,int,com.google.zxing.pdf417.encoder.BarcodeRow) -> a
    void encodeLowLevel$58aa49dd(java.lang.CharSequence,int,int,com.google.zxing.pdf417.encoder.BarcodeMatrix) -> a
    void generateBarcodeLogic$505cff1c(java.lang.String) -> a
    void setCompact$1385ff() -> b
com.google.zxing.pdf417.encoder.PDF417ErrorCorrection -> com.google.zxing.pdf417.encoder.e:
    int[][] EC_COEFFICIENTS -> a
    int getErrorCorrectionCodewordCount$134621() -> a
    java.lang.String generateErrorCorrection$1087b2a(java.lang.CharSequence) -> a
com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder -> com.google.zxing.pdf417.encoder.f:
    byte[] TEXT_MIXED_RAW -> a
    byte[] TEXT_PUNCTUATION_RAW -> b
    byte[] MIXED -> c
    byte[] PUNCTUATION -> d
    java.lang.String encodeHighLevel$726d1602(java.lang.String,int) -> a
    int encodeText(java.lang.CharSequence,int,int,java.lang.StringBuilder,int) -> a
    void encodeBinary(byte[],int,int,int,java.lang.StringBuilder) -> a
    void encodeNumeric(java.lang.String,int,int,java.lang.StringBuilder) -> a
    boolean isDigit(char) -> a
    boolean isAlphaUpper(char) -> b
    boolean isAlphaLower(char) -> c
    boolean isMixed(char) -> d
    boolean isPunctuation(char) -> e
    boolean isText(char) -> f
    int determineConsecutiveDigitCount(java.lang.CharSequence,int) -> a
    int determineConsecutiveTextCount(java.lang.CharSequence,int) -> b
    int determineConsecutiveBinaryCount(java.lang.CharSequence,byte[],int) -> a
com.google.zxing.pdf417.encoder.PDF417Writer -> com.google.zxing.pdf417.encoder.g:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    com.google.zxing.common.BitMatrix bitMatrixFrombitArray(byte[][]) -> a
    byte[][] rotateArray(byte[][]) -> b
com.google.zxing.qrcode.QRCodeReader -> com.google.zxing.qrcode.a:
    com.google.zxing.ResultPoint[] NO_POINTS -> a
    com.google.zxing.qrcode.decoder.Decoder decoder -> b
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    void reset() -> a
com.google.zxing.qrcode.QRCodeWriter -> com.google.zxing.qrcode.b:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    com.google.zxing.common.BitMatrix renderResult(com.google.zxing.qrcode.encoder.QRCode,int,int) -> a
com.google.zxing.qrcode.decoder.BitMatrixParser -> com.google.zxing.qrcode.decoder.a:
    com.google.zxing.common.BitMatrix bitMatrix -> a
    com.google.zxing.qrcode.decoder.Version parsedVersion -> b
    com.google.zxing.qrcode.decoder.FormatInformation parsedFormatInfo -> c
    com.google.zxing.qrcode.decoder.FormatInformation readFormatInformation() -> a
    com.google.zxing.qrcode.decoder.Version readVersion() -> b
    int copyBit(int,int,int) -> a
    byte[] readCodewords() -> c
com.google.zxing.qrcode.decoder.DataBlock -> com.google.zxing.qrcode.decoder.b:
    int numDataCodewords -> a
    byte[] codewords -> b
    com.google.zxing.qrcode.decoder.DataBlock[] getDataBlocks(byte[],com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> a
    int getNumDataCodewords() -> a
    byte[] getCodewords() -> b
com.google.zxing.qrcode.decoder.DataMask -> com.google.zxing.qrcode.decoder.c:
    com.google.zxing.qrcode.decoder.DataMask[] DATA_MASKS -> a
    boolean isMasked(int,int) -> a
    com.google.zxing.qrcode.decoder.DataMask forReference(int) -> a
com.google.zxing.qrcode.decoder.DataMask$DataMask000 -> com.google.zxing.qrcode.decoder.d:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$DataMask001 -> com.google.zxing.qrcode.decoder.e:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$DataMask010 -> com.google.zxing.qrcode.decoder.f:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$DataMask011 -> com.google.zxing.qrcode.decoder.g:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$DataMask100 -> com.google.zxing.qrcode.decoder.h:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$DataMask101 -> com.google.zxing.qrcode.decoder.i:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$DataMask110 -> com.google.zxing.qrcode.decoder.j:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$DataMask111 -> com.google.zxing.qrcode.decoder.k:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DecodedBitStreamParser -> com.google.zxing.qrcode.decoder.l:
    char[] ALPHANUMERIC_CHARS -> a
    com.google.zxing.common.DecoderResult decode(byte[],com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,java.util.Map) -> a
    void decodeHanziSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,int) -> a
    void decodeKanjiSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,int) -> b
    void decodeByteSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,int,com.google.zxing.common.CharacterSetECI,java.util.Collection,java.util.Map) -> a
    char toAlphaNumericChar(int) -> a
    void decodeAlphanumericSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,int,boolean) -> a
    void decodeNumericSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,int) -> c
com.google.zxing.qrcode.decoder.Decoder -> com.google.zxing.qrcode.decoder.m:
    com.google.zxing.common.reedsolomon.ReedSolomonDecoder rsDecoder -> a
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix,java.util.Map) -> a
com.google.zxing.qrcode.decoder.ErrorCorrectionLevel -> com.google.zxing.qrcode.decoder.n:
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel L -> a
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel M -> b
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel Q -> c
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel H -> d
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel[] FOR_BITS -> e
    int bits -> f
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel[] $VALUES -> g
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel[] values() -> values
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel valueOf(java.lang.String) -> valueOf
    int getBits() -> a
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel forBits(int) -> a
com.google.zxing.qrcode.decoder.FormatInformation -> com.google.zxing.qrcode.decoder.o:
    int[][] FORMAT_INFO_DECODE_LOOKUP -> a
    int[] BITS_SET_IN_HALF_BYTE -> b
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel errorCorrectionLevel -> c
    byte dataMask -> d
    int numBitsDiffering(int,int) -> a
    com.google.zxing.qrcode.decoder.FormatInformation decodeFormatInformation(int,int) -> b
    com.google.zxing.qrcode.decoder.FormatInformation doDecodeFormatInformation(int,int) -> c
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel getErrorCorrectionLevel() -> a
    byte getDataMask() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.zxing.qrcode.decoder.Mode -> com.google.zxing.qrcode.decoder.p:
    com.google.zxing.qrcode.decoder.Mode TERMINATOR -> a
    com.google.zxing.qrcode.decoder.Mode NUMERIC -> b
    com.google.zxing.qrcode.decoder.Mode ALPHANUMERIC -> c
    com.google.zxing.qrcode.decoder.Mode STRUCTURED_APPEND -> d
    com.google.zxing.qrcode.decoder.Mode BYTE -> e
    com.google.zxing.qrcode.decoder.Mode ECI -> f
    com.google.zxing.qrcode.decoder.Mode KANJI -> g
    com.google.zxing.qrcode.decoder.Mode FNC1_FIRST_POSITION -> h
    com.google.zxing.qrcode.decoder.Mode FNC1_SECOND_POSITION -> i
    com.google.zxing.qrcode.decoder.Mode HANZI -> j
    int[] characterCountBitsForVersions -> k
    int bits -> l
    com.google.zxing.qrcode.decoder.Mode[] $VALUES -> m
    com.google.zxing.qrcode.decoder.Mode[] values() -> values
    com.google.zxing.qrcode.decoder.Mode valueOf(java.lang.String) -> valueOf
    com.google.zxing.qrcode.decoder.Mode forBits(int) -> a
    int getCharacterCountBits(com.google.zxing.qrcode.decoder.Version) -> a
    int getBits() -> a
com.google.zxing.qrcode.decoder.Version -> com.google.zxing.qrcode.decoder.q:
    int[] VERSION_DECODE_INFO -> a
    com.google.zxing.qrcode.decoder.Version[] VERSIONS -> b
    int versionNumber -> c
    int[] alignmentPatternCenters -> d
    com.google.zxing.qrcode.decoder.Version$ECBlocks[] ecBlocks -> e
    int totalCodewords -> f
    int getVersionNumber() -> a
    int[] getAlignmentPatternCenters() -> b
    int getTotalCodewords() -> c
    int getDimensionForVersion() -> d
    com.google.zxing.qrcode.decoder.Version$ECBlocks getECBlocksForLevel(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> a
    com.google.zxing.qrcode.decoder.Version getProvisionalVersionForDimension(int) -> a
    com.google.zxing.qrcode.decoder.Version getVersionForNumber(int) -> b
    com.google.zxing.qrcode.decoder.Version decodeVersionInformation(int) -> c
    com.google.zxing.common.BitMatrix buildFunctionPattern() -> e
    java.lang.String toString() -> toString
    com.google.zxing.qrcode.decoder.Version[] buildVersions() -> f
com.google.zxing.qrcode.decoder.Version$ECB -> com.google.zxing.qrcode.decoder.r:
    int count -> a
    int dataCodewords -> b
    int getCount() -> a
    int getDataCodewords() -> b
com.google.zxing.qrcode.decoder.Version$ECBlocks -> com.google.zxing.qrcode.decoder.s:
    int ecCodewordsPerBlock -> a
    com.google.zxing.qrcode.decoder.Version$ECB[] ecBlocks -> b
    int getECCodewordsPerBlock() -> a
    int getNumBlocks() -> b
    int getTotalECCodewords() -> c
    com.google.zxing.qrcode.decoder.Version$ECB[] getECBlocks() -> d
com.google.zxing.qrcode.detector.AlignmentPattern -> com.google.zxing.qrcode.detector.a:
    float estimatedModuleSize -> a
    boolean aboutEquals(float,float,float) -> a
    com.google.zxing.qrcode.detector.AlignmentPattern combineEstimate(float,float,float) -> b
com.google.zxing.qrcode.detector.AlignmentPatternFinder -> com.google.zxing.qrcode.detector.b:
    com.google.zxing.common.BitMatrix image -> a
    java.util.List possibleCenters -> b
    int startX -> c
    int startY -> d
    int width -> e
    int height -> f
    float moduleSize -> g
    int[] crossCheckStateCount -> h
    com.google.zxing.ResultPointCallback resultPointCallback -> i
    com.google.zxing.qrcode.detector.AlignmentPattern find() -> a
    float centerFromEnd(int[],int) -> a
    boolean foundPatternCross(int[]) -> a
    com.google.zxing.qrcode.detector.AlignmentPattern handlePossibleCenter(int[],int,int) -> a
com.google.zxing.qrcode.detector.Detector -> com.google.zxing.qrcode.detector.c:
    com.google.zxing.common.BitMatrix image -> a
    com.google.zxing.ResultPointCallback resultPointCallback -> b
    com.google.zxing.common.DetectorResult detect(java.util.Map) -> a
    com.google.zxing.common.DetectorResult processFinderPatternInfo(com.google.zxing.qrcode.detector.FinderPatternInfo) -> a
    float calculateModuleSizeOneWay(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> a
    float sizeOfBlackWhiteBlackRunBothWays(int,int,int,int) -> a
    float sizeOfBlackWhiteBlackRun(int,int,int,int) -> b
com.google.zxing.qrcode.detector.FinderPattern -> com.google.zxing.qrcode.detector.d:
    float estimatedModuleSize -> a
    int count -> b
    float getEstimatedModuleSize() -> c
    int getCount() -> d
    boolean aboutEquals(float,float,float) -> a
    com.google.zxing.qrcode.detector.FinderPattern combineEstimate(float,float,float) -> b
com.google.zxing.qrcode.detector.FinderPatternFinder -> com.google.zxing.qrcode.detector.e:
    com.google.zxing.common.BitMatrix image -> a
    java.util.List possibleCenters -> b
    boolean hasSkipped -> c
    int[] crossCheckStateCount -> d
    com.google.zxing.ResultPointCallback resultPointCallback -> e
    com.google.zxing.qrcode.detector.FinderPatternInfo find(java.util.Map) -> a
    float centerFromEnd(int[],int) -> a
    boolean foundPatternCross(int[]) -> a
    int[] getCrossCheckStateCount() -> a
    boolean handlePossibleCenter(int[],int,int) -> a
    boolean haveMultiplyConfirmedCenters() -> b
com.google.zxing.qrcode.detector.FinderPatternFinder$CenterComparator -> com.google.zxing.qrcode.detector.f:
    float average -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.zxing.qrcode.detector.FinderPatternFinder$FurthestFromAverageComparator -> com.google.zxing.qrcode.detector.g:
    float average -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.zxing.qrcode.detector.FinderPatternInfo -> com.google.zxing.qrcode.detector.h:
    com.google.zxing.qrcode.detector.FinderPattern bottomLeft -> a
    com.google.zxing.qrcode.detector.FinderPattern topLeft -> b
    com.google.zxing.qrcode.detector.FinderPattern topRight -> c
    com.google.zxing.qrcode.detector.FinderPattern getBottomLeft() -> a
    com.google.zxing.qrcode.detector.FinderPattern getTopLeft() -> b
    com.google.zxing.qrcode.detector.FinderPattern getTopRight() -> c
com.google.zxing.qrcode.encoder.BlockPair -> com.google.zxing.qrcode.encoder.a:
    byte[] dataBytes -> a
    byte[] errorCorrectionBytes -> b
    byte[] getDataBytes() -> a
    byte[] getErrorCorrectionBytes() -> b
com.google.zxing.qrcode.encoder.ByteMatrix -> com.google.zxing.qrcode.encoder.b:
    byte[][] bytes -> a
    int width -> b
    int height -> c
    int getHeight() -> a
    int getWidth() -> b
    byte get(int,int) -> a
    byte[][] getArray() -> c
    void set(int,int,int) -> a
    void set(int,int,boolean) -> a
    void clear$132be7() -> d
    java.lang.String toString() -> toString
com.google.zxing.qrcode.encoder.Encoder -> com.google.zxing.qrcode.encoder.c:
    int[] ALPHANUMERIC_TABLE -> a
    void encode(java.lang.String,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,java.util.Map,com.google.zxing.qrcode.encoder.QRCode) -> a
    int getAlphanumericCode(int) -> a
    boolean isOnlyDoubleByteKanji(java.lang.String) -> a
    int chooseMaskPattern(com.google.zxing.common.BitArray,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    void initQRCode(int,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,com.google.zxing.qrcode.decoder.Mode,com.google.zxing.qrcode.encoder.QRCode) -> a
    void terminateBits(int,com.google.zxing.common.BitArray) -> a
    void interleaveWithECBytes(com.google.zxing.common.BitArray,int,int,int,com.google.zxing.common.BitArray) -> a
    byte[] generateECBytes(byte[],int) -> a
com.google.zxing.qrcode.encoder.Encoder$1 -> com.google.zxing.qrcode.encoder.d:
    int[] $SwitchMap$com$google$zxing$qrcode$decoder$Mode -> a
com.google.zxing.qrcode.encoder.MaskUtil -> com.google.zxing.qrcode.encoder.e:
    int applyMaskPenaltyRule1(com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    int applyMaskPenaltyRule1Internal(com.google.zxing.qrcode.encoder.ByteMatrix,boolean) -> a
com.google.zxing.qrcode.encoder.MatrixUtil -> com.google.zxing.qrcode.encoder.f:
    int[][] POSITION_DETECTION_PATTERN -> a
    int[][] HORIZONTAL_SEPARATION_PATTERN -> b
    int[][] VERTICAL_SEPARATION_PATTERN -> c
    int[][] POSITION_ADJUSTMENT_PATTERN -> d
    int[][] POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE -> e
    int[][] TYPE_INFO_COORDINATES -> f
    void buildMatrix(com.google.zxing.common.BitArray,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    void maybeEmbedVersionInfo(int,com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    void embedDataBits(com.google.zxing.common.BitArray,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    int findMSBSet(int) -> a
    int calculateBCHCode(int,int) -> a
    boolean isEmpty(int) -> b
    boolean isValidValue(int) -> c
    void embedHorizontalSeparationPattern(int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    void embedVerticalSeparationPattern(int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> b
    void embedPositionDetectionPattern(int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> c
com.google.zxing.qrcode.encoder.QRCode -> com.google.zxing.qrcode.encoder.g:
    com.google.zxing.qrcode.decoder.Mode mode -> a
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel ecLevel -> b
    int version -> c
    int matrixWidth -> d
    int maskPattern -> e
    int numTotalBytes -> f
    int numDataBytes -> g
    int numECBytes -> h
    int numRSBlocks -> i
    com.google.zxing.qrcode.encoder.ByteMatrix matrix -> j
    int getVersion() -> a
    int getMatrixWidth() -> b
    int getMaskPattern() -> c
    int getNumTotalBytes() -> d
    int getNumDataBytes() -> e
    int getNumRSBlocks() -> f
    com.google.zxing.qrcode.encoder.ByteMatrix getMatrix() -> g
    boolean isValid() -> h
    java.lang.String toString() -> toString
    void setMode(com.google.zxing.qrcode.decoder.Mode) -> a
    void setECLevel(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> a
    void setVersion(int) -> a
    void setMatrixWidth(int) -> b
    void setMaskPattern(int) -> c
    void setNumTotalBytes(int) -> d
    void setNumDataBytes(int) -> e
    void setNumECBytes(int) -> f
    void setNumRSBlocks(int) -> g
    void setMatrix(com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    boolean isValidMaskPattern(int) -> h
